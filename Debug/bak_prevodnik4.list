
bak_prevodnik4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003970  08003970  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003970  08003970  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003970  08003970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003974  08003974  00013974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000040  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000090a9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000266c  00000000  00000000  000290e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000818  00000000  00000000  0002c0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c5ab  00000000  00000000  0002c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc05  00000000  00000000  00048e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c681  00000000  00000000  00054a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f1101  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000233c  00000000  00000000  000f1154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003910 	.word	0x08003910

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003910 	.word	0x08003910

080001c8 <Msg_process>:
 * @return	hodnota 0 (kontrola se nezdařila) nebo 1 (kontrola v pořádku)
 * @param	device Ukazatel na strukturu snímače
 * @param	data Ukazatel na přijaté data
 * @param	data_size počet rpvků dat (nejspíš není nutné)
 */
uint8_t Msg_process(I2C_Sensor *device,uint8_t *data, uint8_t data_size){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	4613      	mov	r3, r2
 80001d4:	71fb      	strb	r3, [r7, #7]
	if(data[0]==INIT_COMMAND){
 80001d6:	68bb      	ldr	r3, [r7, #8]
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2bfe      	cmp	r3, #254	; 0xfe
 80001dc:	d114      	bne.n	8000208 <Msg_process+0x40>
		if(Sensor_init==0){
 80001de:	4b12      	ldr	r3, [pc, #72]	; (8000228 <Msg_process+0x60>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d10e      	bne.n	8000204 <Msg_process+0x3c>
			//I2C_Sensor sensor;
			uint8_t data_buffer[1] = {0xE3};	///< pole dat pro zápis
 80001e6:	23e3      	movs	r3, #227	; 0xe3
 80001e8:	753b      	strb	r3, [r7, #20]
			uint8_t data_rec[2];
			initalize_sensor_struct(device, data_buffer, data_rec);
 80001ea:	f107 0210 	add.w	r2, r7, #16
 80001ee:	f107 0314 	add.w	r3, r7, #20
 80001f2:	4619      	mov	r1, r3
 80001f4:	68f8      	ldr	r0, [r7, #12]
 80001f6:	f000 fda9 	bl	8000d4c <initalize_sensor_struct>
			Sensor_init = 1;
 80001fa:	4b0b      	ldr	r3, [pc, #44]	; (8000228 <Msg_process+0x60>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
			return 1;
 8000200:	2301      	movs	r3, #1
 8000202:	e00d      	b.n	8000220 <Msg_process+0x58>
		}
		else{				//init_command ale snimac jiz inicializovan
			return 0;
 8000204:	2300      	movs	r3, #0
 8000206:	e00b      	b.n	8000220 <Msg_process+0x58>
		}
	}
	else{
		if(recData_check(device,data, data_size))
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	461a      	mov	r2, r3
 800020c:	68b9      	ldr	r1, [r7, #8]
 800020e:	68f8      	ldr	r0, [r7, #12]
 8000210:	f000 f80c 	bl	800022c <recData_check>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <Msg_process+0x56>
			return 1;
 800021a:	2301      	movs	r3, #1
 800021c:	e000      	b.n	8000220 <Msg_process+0x58>
		else
			return 0;
 800021e:	2300      	movs	r3, #0
	}
}
 8000220:	4618      	mov	r0, r3
 8000222:	3718      	adds	r7, #24
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	20000028 	.word	0x20000028

0800022c <recData_check>:
///	\param device je ukazatel na strukturu sniamce se kterou program pracuje
/// \param data je ukazatel na data, které se kontrolují
/// \param data_size je pocet prvku buffer -- tato je asi blblost kontrolovat, navic to do funkce napišu napevno
/// \return hodnota 0 nebo 1, pokud uspesnosti validace dat
uint8_t recData_check(I2C_Sensor *device,uint8_t *data, uint8_t data_size)
{
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	60f8      	str	r0, [r7, #12]
 8000234:	60b9      	str	r1, [r7, #8]
 8000236:	4613      	mov	r3, r2
 8000238:	71fb      	strb	r3, [r7, #7]
	if(data[0]!=device->device_address)	//kontrola adresy
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	781a      	ldrb	r2, [r3, #0]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	429a      	cmp	r2, r3
 8000244:	d001      	beq.n	800024a <recData_check+0x1e>
		return 0;
 8000246:	2300      	movs	r3, #0
 8000248:	e005      	b.n	8000256 <recData_check+0x2a>
	else if(data_size>8)
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	2b08      	cmp	r3, #8
 800024e:	d901      	bls.n	8000254 <recData_check+0x28>
		return 0;
 8000250:	2300      	movs	r3, #0
 8000252:	e000      	b.n	8000256 <recData_check+0x2a>
	else
		return 1;
 8000254:	2301      	movs	r3, #1
}
 8000256:	4618      	mov	r0, r3
 8000258:	3714      	adds	r7, #20
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr

08000262 <OperationMsg>:
 * Dle 2 bytu přijaté zprávy je rozhodnuto o vykonávané operaci
 * @return 0 (operace se nezdařila), 1 operace s ezdařila
 * @param device ukazatel na strukturu sensoru
 * @param Msg ukazatel na data v přijat modbus zprávě
 */
uint8_t OperationMsg(I2C_Sensor *device, uint8_t *Msg){
 8000262:	b580      	push	{r7, lr}
 8000264:	b084      	sub	sp, #16
 8000266:	af00      	add	r7, sp, #0
 8000268:	6078      	str	r0, [r7, #4]
 800026a:	6039      	str	r1, [r7, #0]
	uint8_t Command = Msg[1];		///< promena s hodnotou kodu operace (pouze pro zprehledneni)
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	785b      	ldrb	r3, [r3, #1]
 8000270:	73fb      	strb	r3, [r7, #15]
	switch(Command){
 8000272:	7bfb      	ldrb	r3, [r7, #15]
 8000274:	2b03      	cmp	r3, #3
 8000276:	d002      	beq.n	800027e <OperationMsg+0x1c>
 8000278:	2b06      	cmp	r3, #6
 800027a:	d005      	beq.n	8000288 <OperationMsg+0x26>
 800027c:	e006      	b.n	800028c <OperationMsg+0x2a>
		case ReadHoldingRegister:
			I2C_Read_Sensor(device);
 800027e:	6878      	ldr	r0, [r7, #4]
 8000280:	f000 f918 	bl	80004b4 <I2C_Read_Sensor>
			return 1;
 8000284:	2301      	movs	r3, #1
 8000286:	e002      	b.n	800028e <OperationMsg+0x2c>
			break;

		case WriteSingleRegister:
			return 1;
 8000288:	2301      	movs	r3, #1
 800028a:	e000      	b.n	800028e <OperationMsg+0x2c>
			break;

		default:
			return 0;
 800028c:	2300      	movs	r3, #0
			break;
	}
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	f003 0301 	and.w	r3, r3, #1
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d101      	bne.n	80002ae <LL_I2C_IsActiveFlag_TXE+0x18>
 80002aa:	2301      	movs	r3, #1
 80002ac:	e000      	b.n	80002b0 <LL_I2C_IsActiveFlag_TXE+0x1a>
 80002ae:	2300      	movs	r3, #0
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	2b04      	cmp	r3, #4
 80002ce:	d101      	bne.n	80002d4 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80002d0:	2301      	movs	r3, #1
 80002d2:	e000      	b.n	80002d6 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80002d4:	2300      	movs	r3, #0
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr

080002e2 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80002e2:	b480      	push	{r7}
 80002e4:	b083      	sub	sp, #12
 80002e6:	af00      	add	r7, sp, #0
 80002e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	f003 0320 	and.w	r3, r3, #32
 80002f2:	2b20      	cmp	r3, #32
 80002f4:	d101      	bne.n	80002fa <LL_I2C_IsActiveFlag_STOP+0x18>
 80002f6:	2301      	movs	r3, #1
 80002f8:	e000      	b.n	80002fc <LL_I2C_IsActiveFlag_STOP+0x1a>
 80002fa:	2300      	movs	r3, #0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	69db      	ldr	r3, [r3, #28]
 8000314:	f043 0220 	orr.w	r2, r3, #32
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	61da      	str	r2, [r3, #28]
}
 800031c:	bf00      	nop
 800031e:	370c      	adds	r7, #12
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	60f8      	str	r0, [r7, #12]
 8000330:	60b9      	str	r1, [r7, #8]
 8000332:	607a      	str	r2, [r7, #4]
 8000334:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	685a      	ldr	r2, [r3, #4]
 800033a:	69fb      	ldr	r3, [r7, #28]
 800033c:	0d5b      	lsrs	r3, r3, #21
 800033e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <LL_I2C_HandleTransfer+0x48>)
 8000344:	430b      	orrs	r3, r1
 8000346:	43db      	mvns	r3, r3
 8000348:	401a      	ands	r2, r3
 800034a:	68b9      	ldr	r1, [r7, #8]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4319      	orrs	r1, r3
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	041b      	lsls	r3, r3, #16
 8000354:	4319      	orrs	r1, r3
 8000356:	69bb      	ldr	r3, [r7, #24]
 8000358:	4319      	orrs	r1, r3
 800035a:	69fb      	ldr	r3, [r7, #28]
 800035c:	430b      	orrs	r3, r1
 800035e:	431a      	orrs	r2, r3
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	03ff7bff 	.word	0x03ff7bff

08000374 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000380:	b2db      	uxtb	r3, r3
}
 8000382:	4618      	mov	r0, r3
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr

0800038e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800038e:	b480      	push	{r7}
 8000390:	b083      	sub	sp, #12
 8000392:	af00      	add	r7, sp, #0
 8000394:	6078      	str	r0, [r7, #4]
 8000396:	460b      	mov	r3, r1
 8000398:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800039a:	78fa      	ldrb	r2, [r7, #3]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <I2C_Write>:
 * @param device ukazatel na strukturu snímače
 * @param data ukazatel na zapisované data
 * @param size počet zapisovaných dat
 */
void I2C_Write(I2C_Sensor *device)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af02      	add	r7, sp, #8
 80003b2:	6078      	str	r0, [r7, #4]
	LL_I2C_HandleTransfer(device->i2c, (device->device_address)<<1, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6818      	ldr	r0, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	791b      	ldrb	r3, [r3, #4]
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	4619      	mov	r1, r3
 80003c0:	4b17      	ldr	r3, [pc, #92]	; (8000420 <I2C_Write+0x74>)
 80003c2:	9301      	str	r3, [sp, #4]
 80003c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	2301      	movs	r3, #1
 80003cc:	2200      	movs	r2, #0
 80003ce:	f7ff ffab 	bl	8000328 <LL_I2C_HandleTransfer>
	while(!LL_I2C_IsActiveFlag_STOP(device->i2c))
 80003d2:	e010      	b.n	80003f6 <I2C_Write+0x4a>
		{
			if(LL_I2C_IsActiveFlag_TXE(device->i2c))
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ff5c 	bl	8000296 <LL_I2C_IsActiveFlag_TXE>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d008      	beq.n	80003f6 <I2C_Write+0x4a>
		  	{
			  LL_I2C_TransmitData8(device->i2c, *device->data_send);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	4619      	mov	r1, r3
 80003f0:	4610      	mov	r0, r2
 80003f2:	f7ff ffcc 	bl	800038e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(device->i2c))
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff71 	bl	80002e2 <LL_I2C_IsActiveFlag_STOP>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d0e6      	beq.n	80003d4 <I2C_Write+0x28>
	  	  	}
	 	}
	 	HAL_Delay(10);
 8000406:	200a      	movs	r0, #10
 8000408:	f001 f92a 	bl	8001660 <HAL_Delay>
	 	LL_I2C_ClearFlag_STOP(device->i2c);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff79 	bl	8000308 <LL_I2C_ClearFlag_STOP>
}
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	80002000 	.word	0x80002000

08000424 <I2C_Read>:
 * @param data ukazatel na přečtená data
 * @param size počet zapisovaných dat
 */

void I2C_Read(I2C_Sensor *device)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
    LL_I2C_HandleTransfer(device->i2c, (device->device_address)<<1, LL_I2C_ADDRSLAVE_7BIT, device->data_receive_lenght, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	6818      	ldr	r0, [r3, #0]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	4619      	mov	r1, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	7d1b      	ldrb	r3, [r3, #20]
 800043c:	461a      	mov	r2, r3
 800043e:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <I2C_Read+0x88>)
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000446:	9300      	str	r3, [sp, #0]
 8000448:	4613      	mov	r3, r2
 800044a:	2200      	movs	r2, #0
 800044c:	f7ff ff6c 	bl	8000328 <LL_I2C_HandleTransfer>
 	HAL_Delay(100);
 8000450:	2064      	movs	r0, #100	; 0x64
 8000452:	f001 f905 	bl	8001660 <HAL_Delay>
    int i = 0;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
		  while(!LL_I2C_IsActiveFlag_STOP(device->i2c))
 800045a:	e013      	b.n	8000484 <I2C_Read+0x60>
		  {
			  if(LL_I2C_IsActiveFlag_RXNE(device->i2c))
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff2b 	bl	80002bc <LL_I2C_IsActiveFlag_RXNE>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d00b      	beq.n	8000484 <I2C_Read+0x60>
			  {
				  device->data_receive[i++] = LL_I2C_ReceiveData8(device->i2c);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	691a      	ldr	r2, [r3, #16]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	1c59      	adds	r1, r3, #1
 8000478:	60f9      	str	r1, [r7, #12]
 800047a:	18d4      	adds	r4, r2, r3
 800047c:	f7ff ff7a 	bl	8000374 <LL_I2C_ReceiveData8>
 8000480:	4603      	mov	r3, r0
 8000482:	7023      	strb	r3, [r4, #0]
		  while(!LL_I2C_IsActiveFlag_STOP(device->i2c))
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4618      	mov	r0, r3
 800048a:	f7ff ff2a 	bl	80002e2 <LL_I2C_IsActiveFlag_STOP>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d0e3      	beq.n	800045c <I2C_Read+0x38>
			  }
		  }
		  i=0;
 8000494:	2300      	movs	r3, #0
 8000496:	60fb      	str	r3, [r7, #12]
		  HAL_Delay(30);
 8000498:	201e      	movs	r0, #30
 800049a:	f001 f8e1 	bl	8001660 <HAL_Delay>
		  LL_I2C_ClearFlag_STOP(I2C1);
 800049e:	4804      	ldr	r0, [pc, #16]	; (80004b0 <I2C_Read+0x8c>)
 80004a0:	f7ff ff32 	bl	8000308 <LL_I2C_ClearFlag_STOP>
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd90      	pop	{r4, r7, pc}
 80004ac:	80002400 	.word	0x80002400
 80004b0:	40005400 	.word	0x40005400

080004b4 <I2C_Read_Sensor>:
	 	}
	 	HAL_Delay(10);
	 	LL_I2C_ClearFlag_STOP(device->i2c);
}

void I2C_Read_Sensor(I2C_Sensor* sensor) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
    if (sensor->comm_type_read == COMM_TYPE_READ_1) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	795b      	ldrb	r3, [r3, #5]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d102      	bne.n	80004ca <I2C_Read_Sensor+0x16>
        // provádíme čtení dat s typem komunikace 1, napr. HTU21d
    	I2C_Read_select1(sensor);
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f000 fc67 	bl	8000d98 <I2C_Read_select1>
    }
    else if (sensor->comm_type_read == COMM_TYPE_READ_2) {
        // provádíme čtení dat s typem komunikace 2
    }
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <__NVIC_GetPriorityGrouping+0x18>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	0a1b      	lsrs	r3, r3, #8
 80004de:	f003 0307 	and.w	r3, r3, #7
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	db0b      	blt.n	800051a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	f003 021f 	and.w	r2, r3, #31
 8000508:	4907      	ldr	r1, [pc, #28]	; (8000528 <__NVIC_EnableIRQ+0x38>)
 800050a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050e:	095b      	lsrs	r3, r3, #5
 8000510:	2001      	movs	r0, #1
 8000512:	fa00 f202 	lsl.w	r2, r0, r2
 8000516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000e100 	.word	0xe000e100

0800052c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	db0a      	blt.n	8000556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	b2da      	uxtb	r2, r3
 8000544:	490c      	ldr	r1, [pc, #48]	; (8000578 <__NVIC_SetPriority+0x4c>)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	0112      	lsls	r2, r2, #4
 800054c:	b2d2      	uxtb	r2, r2
 800054e:	440b      	add	r3, r1
 8000550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000554:	e00a      	b.n	800056c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4908      	ldr	r1, [pc, #32]	; (800057c <__NVIC_SetPriority+0x50>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	f003 030f 	and.w	r3, r3, #15
 8000562:	3b04      	subs	r3, #4
 8000564:	0112      	lsls	r2, r2, #4
 8000566:	b2d2      	uxtb	r2, r2
 8000568:	440b      	add	r3, r1
 800056a:	761a      	strb	r2, [r3, #24]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	e000e100 	.word	0xe000e100
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000580:	b480      	push	{r7}
 8000582:	b089      	sub	sp, #36	; 0x24
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f003 0307 	and.w	r3, r3, #7
 8000592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	f1c3 0307 	rsb	r3, r3, #7
 800059a:	2b04      	cmp	r3, #4
 800059c:	bf28      	it	cs
 800059e:	2304      	movcs	r3, #4
 80005a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	3304      	adds	r3, #4
 80005a6:	2b06      	cmp	r3, #6
 80005a8:	d902      	bls.n	80005b0 <NVIC_EncodePriority+0x30>
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	3b03      	subs	r3, #3
 80005ae:	e000      	b.n	80005b2 <NVIC_EncodePriority+0x32>
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	f04f 32ff 	mov.w	r2, #4294967295
 80005b8:	69bb      	ldr	r3, [r7, #24]
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43da      	mvns	r2, r3
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	401a      	ands	r2, r3
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005c8:	f04f 31ff 	mov.w	r1, #4294967295
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	fa01 f303 	lsl.w	r3, r1, r3
 80005d2:	43d9      	mvns	r1, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	4313      	orrs	r3, r2
         );
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3724      	adds	r7, #36	; 0x24
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
	...

080005e8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <LL_DMA_EnableChannel+0x3c>)
 80005f8:	5cd3      	ldrb	r3, [r2, r3]
 80005fa:	461a      	mov	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	3a01      	subs	r2, #1
 8000606:	4907      	ldr	r1, [pc, #28]	; (8000624 <LL_DMA_EnableChannel+0x3c>)
 8000608:	5c8a      	ldrb	r2, [r1, r2]
 800060a:	4611      	mov	r1, r2
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	440a      	add	r2, r1
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	08003928 	.word	0x08003928

08000628 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	3b01      	subs	r3, #1
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <LL_DMA_DisableChannel+0x3c>)
 8000638:	5cd3      	ldrb	r3, [r2, r3]
 800063a:	461a      	mov	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	683a      	ldr	r2, [r7, #0]
 8000644:	3a01      	subs	r2, #1
 8000646:	4907      	ldr	r1, [pc, #28]	; (8000664 <LL_DMA_DisableChannel+0x3c>)
 8000648:	5c8a      	ldrb	r2, [r1, r2]
 800064a:	4611      	mov	r1, r2
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	440a      	add	r2, r1
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	6013      	str	r3, [r2, #0]
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	08003928 	.word	0x08003928

08000668 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	3b01      	subs	r3, #1
 8000678:	4a0c      	ldr	r2, [pc, #48]	; (80006ac <LL_DMA_SetDataLength+0x44>)
 800067a:	5cd3      	ldrb	r3, [r2, r3]
 800067c:	461a      	mov	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	0c1b      	lsrs	r3, r3, #16
 8000686:	041b      	lsls	r3, r3, #16
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	3a01      	subs	r2, #1
 800068c:	4907      	ldr	r1, [pc, #28]	; (80006ac <LL_DMA_SetDataLength+0x44>)
 800068e:	5c8a      	ldrb	r2, [r1, r2]
 8000690:	4611      	mov	r1, r2
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	440a      	add	r2, r1
 8000696:	4611      	mov	r1, r2
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4313      	orrs	r3, r2
 800069c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	08003928 	.word	0x08003928

080006b0 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3308      	adds	r3, #8
 80006bc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	e853 3f00 	ldrex	r3, [r3]
 80006c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006cc:	61fb      	str	r3, [r7, #28]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	3308      	adds	r3, #8
 80006d2:	69fa      	ldr	r2, [r7, #28]
 80006d4:	61ba      	str	r2, [r7, #24]
 80006d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80006d8:	6979      	ldr	r1, [r7, #20]
 80006da:	69ba      	ldr	r2, [r7, #24]
 80006dc:	e841 2300 	strex	r3, r2, [r1]
 80006e0:	613b      	str	r3, [r7, #16]
   return(result);
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1e7      	bne.n	80006b8 <LL_USART_EnableDMAReq_TX+0x8>
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3724      	adds	r7, #36	; 0x24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000702:	695a      	ldr	r2, [r3, #20]
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4313      	orrs	r3, r2
 800070a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4013      	ands	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000

08000728 <MX_DMA_Init>:
/* Includes ------------------------------------------------------------------*/
#include "dma.h"
#include "main.h"
uint8_t TxData[16]= {0};
void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff ffe3 	bl	80006f8 <LL_AHB1_GRP1_EnableClock>

  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000732:	f7ff fecf 	bl	80004d4 <__NVIC_GetPriorityGrouping>
 8000736:	4603      	mov	r3, r0
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff1f 	bl	8000580 <NVIC_EncodePriority>
 8000742:	4603      	mov	r3, r0
 8000744:	4619      	mov	r1, r3
 8000746:	2011      	movs	r0, #17
 8000748:	f7ff fef0 	bl	800052c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800074c:	2011      	movs	r0, #17
 800074e:	f7ff fecf 	bl	80004f0 <__NVIC_EnableIRQ>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <DMA_TransmitData>:

void DMA_TransmitData()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	 LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 800075c:	2107      	movs	r1, #7
 800075e:	4808      	ldr	r0, [pc, #32]	; (8000780 <DMA_TransmitData+0x28>)
 8000760:	f7ff ff62 	bl	8000628 <LL_DMA_DisableChannel>

	  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, sizeof(TxData));
 8000764:	2210      	movs	r2, #16
 8000766:	2107      	movs	r1, #7
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <DMA_TransmitData+0x28>)
 800076a:	f7ff ff7d 	bl	8000668 <LL_DMA_SetDataLength>

	  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 800076e:	2107      	movs	r1, #7
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <DMA_TransmitData+0x28>)
 8000772:	f7ff ff39 	bl	80005e8 <LL_DMA_EnableChannel>

	  LL_USART_EnableDMAReq_TX(USART2);
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <DMA_TransmitData+0x2c>)
 8000778:	f7ff ff9a 	bl	80006b0 <LL_USART_EnableDMAReq_TX>
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40020000 	.word	0x40020000
 8000784:	40004400 	.word	0x40004400

08000788 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <LL_AHB1_GRP1_EnableClock>:
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ae:	695a      	ldr	r2, [r3, #20]
 80007b0:	4907      	ldr	r1, [pc, #28]	; (80007d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4013      	ands	r3, r2
 80007c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	40021000 	.word	0x40021000

080007d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80007ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007ee:	f7ff ffd9 	bl	80007a4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80007f2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007f6:	f7ff ffd5 	bl	80007a4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 80007fa:	2108      	movs	r1, #8
 80007fc:	480a      	ldr	r0, [pc, #40]	; (8000828 <MX_GPIO_Init+0x54>)
 80007fe:	f7ff ffc3 	bl	8000788 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000802:	2308      	movs	r3, #8
 8000804:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000806:	2301      	movs	r3, #1
 8000808:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_GPIO_Init+0x54>)
 800081c:	f002 fc79 	bl	8003112 <LL_GPIO_Init>

}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	48000400 	.word	0x48000400

0800082c <LL_I2C_Enable>:
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f043 0201 	orr.w	r2, r3, #1
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <LL_I2C_EnableClockStretching>:
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	601a      	str	r2, [r3, #0]
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <LL_I2C_DisableGeneralCall>:
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <LL_I2C_SetOwnAddress2>:
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80008a0:	f023 0306 	bic.w	r3, r3, #6
 80008a4:	68b9      	ldr	r1, [r7, #8]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	430a      	orrs	r2, r1
 80008aa:	431a      	orrs	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	60da      	str	r2, [r3, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <LL_I2C_DisableOwnAddress2>:
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	60da      	str	r2, [r3, #12]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <LL_I2C_EnableAutoEndMode>:
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	605a      	str	r2, [r3, #4]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <LL_AHB1_GRP1_EnableClock>:
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000906:	695a      	ldr	r2, [r3, #20]
 8000908:	4907      	ldr	r1, [pc, #28]	; (8000928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4313      	orrs	r3, r2
 800090e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4013      	ands	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	40021000 	.word	0x40021000

0800092c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000936:	69da      	ldr	r2, [r3, #28]
 8000938:	4907      	ldr	r1, [pc, #28]	; (8000958 <LL_APB1_GRP1_EnableClock+0x2c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4313      	orrs	r3, r2
 800093e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000942:	69da      	ldr	r2, [r3, #28]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4013      	ands	r3, r2
 8000948:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800094a:	68fb      	ldr	r3, [r7, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	40021000 	.word	0x40021000

0800095c <MX_I2C1_Init>:
/* Includes ------------------------------------------------------------------*/
#include "i2c.h"

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08e      	sub	sp, #56	; 0x38
 8000960:	af00      	add	r7, sp, #0

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
 8000972:	615a      	str	r2, [r3, #20]
 8000974:	619a      	str	r2, [r3, #24]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000986:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800098a:	f7ff ffb7 	bl	80008fc <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800098e:	23c0      	movs	r3, #192	; 0xc0
 8000990:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000992:	2302      	movs	r3, #2
 8000994:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800099a:	2301      	movs	r3, #1
 800099c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80009a2:	2304      	movs	r3, #4
 80009a4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4619      	mov	r1, r3
 80009aa:	481a      	ldr	r0, [pc, #104]	; (8000a14 <MX_I2C1_Init+0xb8>)
 80009ac:	f002 fbb1 	bl	8003112 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80009b0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009b4:	f7ff ffba 	bl	800092c <LL_APB1_GRP1_EnableClock>
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80009b8:	4817      	ldr	r0, [pc, #92]	; (8000a18 <MX_I2C1_Init+0xbc>)
 80009ba:	f7ff ff8f 	bl	80008dc <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80009be:	4816      	ldr	r0, [pc, #88]	; (8000a18 <MX_I2C1_Init+0xbc>)
 80009c0:	f7ff ff7c 	bl	80008bc <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80009c4:	4814      	ldr	r0, [pc, #80]	; (8000a18 <MX_I2C1_Init+0xbc>)
 80009c6:	f7ff ff51 	bl	800086c <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <MX_I2C1_Init+0xbc>)
 80009cc:	f7ff ff3e 	bl	800084c <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x0000020B;
 80009d4:	f240 230b 	movw	r3, #523	; 0x20b
 80009d8:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4808      	ldr	r0, [pc, #32]	; (8000a18 <MX_I2C1_Init+0xbc>)
 80009f6:	f002 fc9f 	bl	8003338 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	4806      	ldr	r0, [pc, #24]	; (8000a18 <MX_I2C1_Init+0xbc>)
 8000a00:	f7ff ff44 	bl	800088c <LL_I2C_SetOwnAddress2>
  LL_I2C_Enable(I2C1);
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_I2C1_Init+0xbc>)
 8000a06:	f7ff ff11 	bl	800082c <LL_I2C_Enable>
}
 8000a0a:	bf00      	nop
 8000a0c:	3738      	adds	r7, #56	; 0x38
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	48000400 	.word	0x48000400
 8000a18:	40005400 	.word	0x40005400

08000a1c <LL_USART_IsActiveFlag_PE>:
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_PE) == (USART_ISR_PE)) ? 1UL : 0UL);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d101      	bne.n	8000a34 <LL_USART_IsActiveFlag_PE+0x18>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e000      	b.n	8000a36 <LL_USART_IsActiveFlag_PE+0x1a>
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <LL_USART_IsActiveFlag_FE>:
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d101      	bne.n	8000a5a <LL_USART_IsActiveFlag_FE+0x18>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <LL_USART_IsActiveFlag_FE+0x1a>
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LL_USART_IsActiveFlag_ORE>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	f003 0308 	and.w	r3, r3, #8
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d101      	bne.n	8000a80 <LL_USART_IsActiveFlag_ORE+0x18>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <LL_USART_IsActiveFlag_ORE+0x1a>
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_USART_IsActiveFlag_RXNE>:
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 0320 	and.w	r3, r3, #32
 8000a9e:	2b20      	cmp	r3, #32
 8000aa0:	d101      	bne.n	8000aa6 <LL_USART_IsActiveFlag_RXNE+0x18>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_USART_ReceiveData9>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData9
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
  */
__STATIC_INLINE uint16_t LL_USART_ReceiveData9(USART_TypeDef *USARTx)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ac6:	b29b      	uxth	r3, r3
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	041a      	lsls	r2, r3, #16
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43d9      	mvns	r1, r3
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	400b      	ands	r3, r1
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	619a      	str	r2, [r3, #24]
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <main>:
} State_t;
fedfasdefsef;
void SystemClock_Config(void);

int main(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
  State_t currentState = STATE_START;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	77fb      	strb	r3, [r7, #31]

  while (1)
  {
	 switch(currentState){
 8000b12:	7ffb      	ldrb	r3, [r7, #31]
 8000b14:	2b05      	cmp	r3, #5
 8000b16:	d858      	bhi.n	8000bca <main+0xc2>
 8000b18:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <main+0x18>)
 8000b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b1e:	bf00      	nop
 8000b20:	08000b39 	.word	0x08000b39
 8000b24:	08000b57 	.word	0x08000b57
 8000b28:	08000b79 	.word	0x08000b79
 8000b2c:	08000b97 	.word	0x08000b97
 8000b30:	08000bb3 	.word	0x08000bb3
 8000b34:	08000bc5 	.word	0x08000bc5
	  case STATE_START:
		  HAL_Init();
 8000b38:	f000 fd2c 	bl	8001594 <HAL_Init>
		  SystemClock_Config();
 8000b3c:	f000 f850 	bl	8000be0 <SystemClock_Config>
		  MX_GPIO_Init();
 8000b40:	f7ff fe48 	bl	80007d4 <MX_GPIO_Init>
		  MX_DMA_Init();
 8000b44:	f7ff fdf0 	bl	8000728 <MX_DMA_Init>
		  MX_USART2_UART_Init();
 8000b48:	f000 fc5a 	bl	8001400 <MX_USART2_UART_Init>
		  MX_I2C1_Init();
 8000b4c:	f7ff ff06 	bl	800095c <MX_I2C1_Init>
		  I2C_Sensor sensor;
		  //initalize_sensor_struct(&sensor);


		  currentState = STATE_IDLE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	77fb      	strb	r3, [r7, #31]
		  break;
 8000b54:	e03d      	b.n	8000bd2 <main+0xca>

	  case STATE_IDLE:
		  if(recvComplete)
 8000b56:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <main+0xcc>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d005      	beq.n	8000b6a <main+0x62>
		  {
			  currentState = STATE_PROCESS_MESSAGE;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	77fb      	strb	r3, [r7, #31]
		  	  recvComplete = 0;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <main+0xcc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
		  }
		  else if(!recvComplete)
			  currentState = STATE_IDLE;
		  break;
 8000b68:	e032      	b.n	8000bd0 <main+0xc8>
		  else if(!recvComplete)
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <main+0xcc>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d12e      	bne.n	8000bd0 <main+0xc8>
			  currentState = STATE_IDLE;
 8000b72:	2301      	movs	r3, #1
 8000b74:	77fb      	strb	r3, [r7, #31]
		  break;
 8000b76:	e02b      	b.n	8000bd0 <main+0xc8>

	  case STATE_PROCESS_MESSAGE:
	  {
		  if(Msg_process(&sensor, RxData, 8))
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	4916      	ldr	r1, [pc, #88]	; (8000bd8 <main+0xd0>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fb22 	bl	80001c8 <Msg_process>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <main+0x88>
			  currentState = STATE_SENSOR_OPERATION;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	77fb      	strb	r3, [r7, #31]
		  else
			  currentState = STATE_MODBUS_ERROR_MSG;
		  break;
 8000b8e:	e020      	b.n	8000bd2 <main+0xca>
			  currentState = STATE_MODBUS_ERROR_MSG;
 8000b90:	2305      	movs	r3, #5
 8000b92:	77fb      	strb	r3, [r7, #31]
		  break;
 8000b94:	e01d      	b.n	8000bd2 <main+0xca>
	  }
	  case STATE_SENSOR_OPERATION:
		  if(OperationMsg(&sensor, RxData))
 8000b96:	463b      	mov	r3, r7
 8000b98:	490f      	ldr	r1, [pc, #60]	; (8000bd8 <main+0xd0>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f7ff fb61 	bl	8000262 <OperationMsg>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <main+0xa4>
			  currentState = STATE_MODBUS_RESPONSE;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	77fb      	strb	r3, [r7, #31]
		  else
			  currentState = STATE_MODBUS_ERROR_MSG;
		  break;
 8000baa:	e012      	b.n	8000bd2 <main+0xca>
			  currentState = STATE_MODBUS_ERROR_MSG;
 8000bac:	2305      	movs	r3, #5
 8000bae:	77fb      	strb	r3, [r7, #31]
		  break;
 8000bb0:	e00f      	b.n	8000bd2 <main+0xca>

	  case STATE_MODBUS_RESPONSE:
		  TxData[0]=sensor.data_receive[0];
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <main+0xd4>)
 8000bb8:	701a      	strb	r2, [r3, #0]
		  DMA_TransmitData();
 8000bba:	f7ff fdcd 	bl	8000758 <DMA_TransmitData>
		  currentState = STATE_IDLE;		//nezapomenout zmenit
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	77fb      	strb	r3, [r7, #31]
		  break;
 8000bc2:	e006      	b.n	8000bd2 <main+0xca>

	  case STATE_MODBUS_ERROR_MSG:
		  currentState = STATE_IDLE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	77fb      	strb	r3, [r7, #31]
		  break;
 8000bc8:	e003      	b.n	8000bd2 <main+0xca>

	  default:
		  currentState = STATE_START;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	77fb      	strb	r3, [r7, #31]
		  break;
 8000bce:	e000      	b.n	8000bd2 <main+0xca>
		  break;
 8000bd0:	bf00      	nop
	 switch(currentState){
 8000bd2:	e79e      	b.n	8000b12 <main+0xa>
 8000bd4:	20000044 	.word	0x20000044
 8000bd8:	2000003c 	.word	0x2000003c
 8000bdc:	2000002c 	.word	0x2000002c

08000be0 <SystemClock_Config>:
  }//end while
}//end main


void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b096      	sub	sp, #88	; 0x58
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bea:	2228      	movs	r2, #40	; 0x28
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 fe86 	bl	8003900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
 8000c12:	615a      	str	r2, [r3, #20]


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c14:	2302      	movs	r3, #2
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c20:	2302      	movs	r3, #2
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c24:	2300      	movs	r3, #0
 8000c26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c28:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c2c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fe1e 	bl	8001874 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c3e:	f000 f87f 	bl	8000d40 <Error_Handler>
  }


  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	230f      	movs	r3, #15
 8000c44:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c46:	2302      	movs	r3, #2
 8000c48:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	2102      	movs	r1, #2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 fe46 	bl	80028f0 <HAL_RCC_ClockConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c6a:	f000 f869 	bl	8000d40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c6e:	2320      	movs	r3, #32
 8000c70:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f002 f81f 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000c84:	f000 f85c 	bl	8000d40 <Error_Handler>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3758      	adds	r7, #88	; 0x58
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  static uint8_t counter = 0;
  /* USER CODE BEGIN USART2_IRQn 0 */
  if (LL_USART_IsActiveFlag_ORE(USART2)) // Over run error
 8000c94:	4825      	ldr	r0, [pc, #148]	; (8000d2c <USART2_IRQHandler+0x9c>)
 8000c96:	f7ff fee7 	bl	8000a68 <LL_USART_IsActiveFlag_ORE>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <USART2_IRQHandler+0x1e>
  {
    LL_USART_ReceiveData9(USART2); // read away
 8000ca0:	4822      	ldr	r0, [pc, #136]	; (8000d2c <USART2_IRQHandler+0x9c>)
 8000ca2:	f7ff ff07 	bl	8000ab4 <LL_USART_ReceiveData9>
    counter = 0;
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <USART2_IRQHandler+0xa0>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
      recvComplete = 1;
      LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
    }
	// receive processing
  }
}
 8000cac:	e03c      	b.n	8000d28 <USART2_IRQHandler+0x98>
  else if (LL_USART_IsActiveFlag_PE(USART2)) // Parity error
 8000cae:	481f      	ldr	r0, [pc, #124]	; (8000d2c <USART2_IRQHandler+0x9c>)
 8000cb0:	f7ff feb4 	bl	8000a1c <LL_USART_IsActiveFlag_PE>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <USART2_IRQHandler+0x38>
    LL_USART_ReceiveData9(USART2); // read and discard
 8000cba:	481c      	ldr	r0, [pc, #112]	; (8000d2c <USART2_IRQHandler+0x9c>)
 8000cbc:	f7ff fefa 	bl	8000ab4 <LL_USART_ReceiveData9>
    counter = 0;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <USART2_IRQHandler+0xa0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
}
 8000cc6:	e02f      	b.n	8000d28 <USART2_IRQHandler+0x98>
   else if (LL_USART_IsActiveFlag_FE(USART2)) // Framing error
 8000cc8:	4818      	ldr	r0, [pc, #96]	; (8000d2c <USART2_IRQHandler+0x9c>)
 8000cca:	f7ff feba 	bl	8000a42 <LL_USART_IsActiveFlag_FE>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d006      	beq.n	8000ce2 <USART2_IRQHandler+0x52>
    LL_USART_ReceiveData9(USART2); // read away
 8000cd4:	4815      	ldr	r0, [pc, #84]	; (8000d2c <USART2_IRQHandler+0x9c>)
 8000cd6:	f7ff feed 	bl	8000ab4 <LL_USART_ReceiveData9>
    counter = 0;
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <USART2_IRQHandler+0xa0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
}
 8000ce0:	e022      	b.n	8000d28 <USART2_IRQHandler+0x98>
  else if (LL_USART_IsActiveFlag_RXNE(USART2))
 8000ce2:	4812      	ldr	r0, [pc, #72]	; (8000d2c <USART2_IRQHandler+0x9c>)
 8000ce4:	f7ff fed3 	bl	8000a8e <LL_USART_IsActiveFlag_RXNE>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d01c      	beq.n	8000d28 <USART2_IRQHandler+0x98>
    RxData[counter++] = (uint32_t)LL_USART_ReceiveData9(USART2);
 8000cee:	480f      	ldr	r0, [pc, #60]	; (8000d2c <USART2_IRQHandler+0x9c>)
 8000cf0:	f7ff fee0 	bl	8000ab4 <LL_USART_ReceiveData9>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <USART2_IRQHandler+0xa0>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	b2d1      	uxtb	r1, r2
 8000d00:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <USART2_IRQHandler+0xa0>)
 8000d02:	7011      	strb	r1, [r2, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	b2c1      	uxtb	r1, r0
 8000d08:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <USART2_IRQHandler+0xa4>)
 8000d0a:	5499      	strb	r1, [r3, r2]
    if (8 <= counter)
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <USART2_IRQHandler+0xa0>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b07      	cmp	r3, #7
 8000d12:	d909      	bls.n	8000d28 <USART2_IRQHandler+0x98>
      counter = 0;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <USART2_IRQHandler+0xa0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
      recvComplete = 1;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <USART2_IRQHandler+0xa8>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
      LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_3);
 8000d20:	2108      	movs	r1, #8
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <USART2_IRQHandler+0xac>)
 8000d24:	f7ff fed6 	bl	8000ad4 <LL_GPIO_TogglePin>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	20000045 	.word	0x20000045
 8000d34:	2000003c 	.word	0x2000003c
 8000d38:	20000044 	.word	0x20000044
 8000d3c:	48000400 	.word	0x48000400

08000d40 <Error_Handler>:
        *(arr + i) = 0;
    }
}

void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop

  __disable_irq();
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <initalize_sensor_struct>:
  //uint8_t data_buffer[] = {0xE3};	///< pole dat pro zápis
  //uint8_t data_rec[2];				///< pole dat pro uložení přečtených dat

/// \brief Funkc epro inializaci snímače s danými parametry, dané parametry lze měnit
/// \param sensor_struct ukazatel na předanou strukturu obecného snímače
  void initalize_sensor_struct(I2C_Sensor *sensor_struct, uint8_t *data_send, uint8_t *data_receive){
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	  sensor_struct->device_address = (0x40);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	711a      	strb	r2, [r3, #4]
	  sensor_struct->i2c = I2C1;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <initalize_sensor_struct+0x48>)
 8000d62:	601a      	str	r2, [r3, #0]
	  sensor_struct->comm_type_read = COMM_TYPE_READ_1;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2200      	movs	r2, #0
 8000d68:	715a      	strb	r2, [r3, #5]
	  sensor_struct->comm_type_write = COMM_TYPE_WRITE_1;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	719a      	strb	r2, [r3, #6]
	  sensor_struct->data_receive = data_receive;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	611a      	str	r2, [r3, #16]
	  sensor_struct->data_receive_lenght = 2;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2202      	movs	r2, #2
 8000d7a:	751a      	strb	r2, [r3, #20]
	  sensor_struct->data_send = data_send;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	68ba      	ldr	r2, [r7, #8]
 8000d80:	609a      	str	r2, [r3, #8]
	  sensor_struct->data_send_length = 1;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2201      	movs	r2, #1
 8000d86:	731a      	strb	r2, [r3, #12]
  }
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40005400 	.word	0x40005400

08000d98 <I2C_Read_select1>:
 /**
  * @brief Funkce pro čtení na typu sensoru 1
  * Nejjednonušší způsob, zapíše se příkaz, a ihned se čte
  * @param sensor ukzatel na strukturu sensoru
  */
void I2C_Read_select1(I2C_Sensor *sensor){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	I2C_Write(sensor);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fb03 	bl	80003ac <I2C_Write>
	I2C_Read(sensor);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fb3c 	bl	8000424 <I2C_Read>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <HAL_MspInit+0x44>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <HAL_MspInit+0x44>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <HAL_MspInit+0x44>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_MspInit+0x44>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <HAL_MspInit+0x44>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_MspInit+0x44>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e10:	bf0c      	ite	eq
 8000e12:	2301      	moveq	r3, #1
 8000e14:	2300      	movne	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e32:	605a      	str	r2, [r3, #4]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <NMI_Handler>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f3xx_it.h"

void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 fbc8 	bl	8001620 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1)==1)
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <DMA1_Channel7_IRQHandler+0x1c>)
 8000e9a:	f7ff ffaf 	bl	8000dfc <LL_DMA_IsActiveFlag_TC7>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d102      	bne.n	8000eaa <DMA1_Channel7_IRQHandler+0x16>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <DMA1_Channel7_IRQHandler+0x1c>)
 8000ea6:	f7ff ffbd 	bl	8000e24 <LL_DMA_ClearFlag_TC7>
	}
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40020000 	.word	0x40020000

08000eb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <SystemInit+0x20>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemInit+0x20>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	; (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	; (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	; 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	; 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <LL_DMA_SetDataTransferDirection>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <LL_DMA_SetDataTransferDirection+0x48>)
 8000ffe:	5cd3      	ldrb	r3, [r2, r3]
 8001000:	461a      	mov	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800100c:	f023 0310 	bic.w	r3, r3, #16
 8001010:	68ba      	ldr	r2, [r7, #8]
 8001012:	3a01      	subs	r2, #1
 8001014:	4907      	ldr	r1, [pc, #28]	; (8001034 <LL_DMA_SetDataTransferDirection+0x48>)
 8001016:	5c8a      	ldrb	r2, [r1, r2]
 8001018:	4611      	mov	r1, r2
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	440a      	add	r2, r1
 800101e:	4611      	mov	r1, r2
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4313      	orrs	r3, r2
 8001024:	600b      	str	r3, [r1, #0]
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	08003948 	.word	0x08003948

08001038 <LL_DMA_SetMode>:
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3b01      	subs	r3, #1
 8001048:	4a0c      	ldr	r2, [pc, #48]	; (800107c <LL_DMA_SetMode+0x44>)
 800104a:	5cd3      	ldrb	r3, [r2, r3]
 800104c:	461a      	mov	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 0220 	bic.w	r2, r3, #32
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	3b01      	subs	r3, #1
 800105c:	4907      	ldr	r1, [pc, #28]	; (800107c <LL_DMA_SetMode+0x44>)
 800105e:	5ccb      	ldrb	r3, [r1, r3]
 8001060:	4619      	mov	r1, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	440b      	add	r3, r1
 8001066:	4619      	mov	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	08003948 	.word	0x08003948

08001080 <LL_DMA_SetPeriphIncMode>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	3b01      	subs	r3, #1
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <LL_DMA_SetPeriphIncMode+0x44>)
 8001092:	5cd3      	ldrb	r3, [r2, r3]
 8001094:	461a      	mov	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4413      	add	r3, r2
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <LL_DMA_SetPeriphIncMode+0x44>)
 80010a6:	5ccb      	ldrb	r3, [r1, r3]
 80010a8:	4619      	mov	r1, r3
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	440b      	add	r3, r1
 80010ae:	4619      	mov	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	08003948 	.word	0x08003948

080010c8 <LL_DMA_SetMemoryIncMode>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <LL_DMA_SetMemoryIncMode+0x44>)
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	461a      	mov	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4413      	add	r3, r2
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <LL_DMA_SetMemoryIncMode+0x44>)
 80010ee:	5ccb      	ldrb	r3, [r1, r3]
 80010f0:	4619      	mov	r1, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	440b      	add	r3, r1
 80010f6:	4619      	mov	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	08003948 	.word	0x08003948

08001110 <LL_DMA_SetPeriphSize>:
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	3b01      	subs	r3, #1
 8001120:	4a0c      	ldr	r2, [pc, #48]	; (8001154 <LL_DMA_SetPeriphSize+0x44>)
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	461a      	mov	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3b01      	subs	r3, #1
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <LL_DMA_SetPeriphSize+0x44>)
 8001136:	5ccb      	ldrb	r3, [r1, r3]
 8001138:	4619      	mov	r1, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	440b      	add	r3, r1
 800113e:	4619      	mov	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	08003948 	.word	0x08003948

08001158 <LL_DMA_SetMemorySize>:
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	3b01      	subs	r3, #1
 8001168:	4a0c      	ldr	r2, [pc, #48]	; (800119c <LL_DMA_SetMemorySize+0x44>)
 800116a:	5cd3      	ldrb	r3, [r2, r3]
 800116c:	461a      	mov	r2, r3
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3b01      	subs	r3, #1
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <LL_DMA_SetMemorySize+0x44>)
 800117e:	5ccb      	ldrb	r3, [r1, r3]
 8001180:	4619      	mov	r1, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	440b      	add	r3, r1
 8001186:	4619      	mov	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4313      	orrs	r3, r2
 800118c:	600b      	str	r3, [r1, #0]
}
 800118e:	bf00      	nop
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	08003948 	.word	0x08003948

080011a0 <LL_DMA_SetChannelPriorityLevel>:
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80011b2:	5cd3      	ldrb	r3, [r2, r3]
 80011b4:	461a      	mov	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4413      	add	r3, r2
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80011c6:	5ccb      	ldrb	r3, [r1, r3]
 80011c8:	4619      	mov	r1, r3
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	440b      	add	r3, r1
 80011ce:	4619      	mov	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	08003948 	.word	0x08003948

080011e8 <LL_DMA_ConfigAddresses>:
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b10      	cmp	r3, #16
 80011fa:	d114      	bne.n	8001226 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	3b01      	subs	r3, #1
 8001200:	4a16      	ldr	r2, [pc, #88]	; (800125c <LL_DMA_ConfigAddresses+0x74>)
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	461a      	mov	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	461a      	mov	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	3b01      	subs	r3, #1
 8001214:	4a11      	ldr	r2, [pc, #68]	; (800125c <LL_DMA_ConfigAddresses+0x74>)
 8001216:	5cd3      	ldrb	r3, [r2, r3]
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	461a      	mov	r2, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	6093      	str	r3, [r2, #8]
}
 8001224:	e013      	b.n	800124e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3b01      	subs	r3, #1
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <LL_DMA_ConfigAddresses+0x74>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	461a      	mov	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	3b01      	subs	r3, #1
 800123e:	4a07      	ldr	r2, [pc, #28]	; (800125c <LL_DMA_ConfigAddresses+0x74>)
 8001240:	5cd3      	ldrb	r3, [r2, r3]
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4413      	add	r3, r2
 8001248:	461a      	mov	r2, r3
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	60d3      	str	r3, [r2, #12]
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	08003948 	.word	0x08003948

08001260 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <LL_DMA_EnableIT_TC+0x3c>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	461a      	mov	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	3a01      	subs	r2, #1
 800127e:	4907      	ldr	r1, [pc, #28]	; (800129c <LL_DMA_EnableIT_TC+0x3c>)
 8001280:	5c8a      	ldrb	r2, [r1, r2]
 8001282:	4611      	mov	r1, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	440a      	add	r2, r1
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6013      	str	r3, [r2, #0]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	08003948 	.word	0x08003948

080012a0 <LL_USART_Enable>:
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f043 0201 	orr.w	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_USART_ConfigAsyncMode>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	609a      	str	r2, [r3, #8]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_USART_EnableIT_RXNE>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	; 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	e853 3f00 	ldrex	r3, [r3]
 80012fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69fa      	ldr	r2, [r7, #28]
 800130c:	61ba      	str	r2, [r7, #24]
 800130e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001310:	6979      	ldr	r1, [r7, #20]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	e841 2300 	strex	r3, r2, [r1]
 8001318:	613b      	str	r3, [r7, #16]
   return(result);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e9      	bne.n	80012f4 <LL_USART_EnableIT_RXNE+0x8>
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_USART_DisableIT_CTS>:
{
 800132e:	b480      	push	{r7}
 8001330:	b089      	sub	sp, #36	; 0x24
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3308      	adds	r3, #8
 800133a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	e853 3f00 	ldrex	r3, [r3]
 8001342:	60bb      	str	r3, [r7, #8]
   return(result);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3308      	adds	r3, #8
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	61ba      	str	r2, [r7, #24]
 8001354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001356:	6979      	ldr	r1, [r7, #20]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	e841 2300 	strex	r3, r2, [r1]
 800135e:	613b      	str	r3, [r7, #16]
   return(result);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1e7      	bne.n	8001336 <LL_USART_DisableIT_CTS+0x8>
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	3724      	adds	r7, #36	; 0x24
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_USART_DMA_GetRegAddr>:
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d103      	bne.n	800138c <LL_USART_DMA_GetRegAddr+0x18>
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3328      	adds	r3, #40	; 0x28
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	e002      	b.n	8001392 <LL_USART_DMA_GetRegAddr+0x1e>
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3324      	adds	r3, #36	; 0x24
 8001390:	60fb      	str	r3, [r7, #12]
  return data_reg_addr;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_AHB1_GRP1_EnableClock>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013aa:	695a      	ldr	r2, [r3, #20]
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4013      	ands	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40021000 	.word	0x40021000

080013d0 <LL_APB1_GRP1_EnableClock>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80013da:	69da      	ldr	r2, [r3, #28]
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4013      	ands	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	40021000 	.word	0x40021000

08001400 <MX_USART2_UART_Init>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "usart.h"

void MX_USART2_UART_Init(void)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b091      	sub	sp, #68	; 0x44
 8001404:	af02      	add	r7, sp, #8


  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	615a      	str	r2, [r3, #20]

  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800142a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800142e:	f7ff ffcf 	bl	80013d0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001432:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001436:	f7ff ffb3 	bl	80013a0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800143a:	f248 0304 	movw	r3, #32772	; 0x8004
 800143e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001440:	2302      	movs	r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001450:	2307      	movs	r3, #7
 8001452:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	4619      	mov	r1, r3
 8001458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800145c:	f001 fe59 	bl	8003112 <LL_GPIO_Init>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001460:	2210      	movs	r2, #16
 8001462:	2107      	movs	r1, #7
 8001464:	4833      	ldr	r0, [pc, #204]	; (8001534 <MX_USART2_UART_Init+0x134>)
 8001466:	f7ff fdc1 	bl	8000fec <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 800146a:	2200      	movs	r2, #0
 800146c:	2107      	movs	r1, #7
 800146e:	4831      	ldr	r0, [pc, #196]	; (8001534 <MX_USART2_UART_Init+0x134>)
 8001470:	f7ff fe96 	bl	80011a0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8001474:	2200      	movs	r2, #0
 8001476:	2107      	movs	r1, #7
 8001478:	482e      	ldr	r0, [pc, #184]	; (8001534 <MX_USART2_UART_Init+0x134>)
 800147a:	f7ff fddd 	bl	8001038 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 800147e:	2200      	movs	r2, #0
 8001480:	2107      	movs	r1, #7
 8001482:	482c      	ldr	r0, [pc, #176]	; (8001534 <MX_USART2_UART_Init+0x134>)
 8001484:	f7ff fdfc 	bl	8001080 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	2107      	movs	r1, #7
 800148c:	4829      	ldr	r0, [pc, #164]	; (8001534 <MX_USART2_UART_Init+0x134>)
 800148e:	f7ff fe1b 	bl	80010c8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8001492:	2200      	movs	r2, #0
 8001494:	2107      	movs	r1, #7
 8001496:	4827      	ldr	r0, [pc, #156]	; (8001534 <MX_USART2_UART_Init+0x134>)
 8001498:	f7ff fe3a 	bl	8001110 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800149c:	2200      	movs	r2, #0
 800149e:	2107      	movs	r1, #7
 80014a0:	4824      	ldr	r0, [pc, #144]	; (8001534 <MX_USART2_UART_Init+0x134>)
 80014a2:	f7ff fe59 	bl	8001158 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014a6:	f7ff fd17 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fd67 	bl	8000f84 <NVIC_EncodePriority>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4619      	mov	r1, r3
 80014ba:	2026      	movs	r0, #38	; 0x26
 80014bc:	f7ff fd38 	bl	8000f30 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80014c0:	2026      	movs	r0, #38	; 0x26
 80014c2:	f7ff fd17 	bl	8000ef4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 38400;
 80014c6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80014ca:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80014d8:	230c      	movs	r3, #12
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80014e0:	2300      	movs	r3, #0
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4813      	ldr	r0, [pc, #76]	; (8001538 <MX_USART2_UART_Init+0x138>)
 80014ec:	f002 f978 	bl	80037e0 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80014f0:	4811      	ldr	r0, [pc, #68]	; (8001538 <MX_USART2_UART_Init+0x138>)
 80014f2:	f7ff ff1c 	bl	800132e <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80014f6:	4810      	ldr	r0, [pc, #64]	; (8001538 <MX_USART2_UART_Init+0x138>)
 80014f8:	f7ff fee2 	bl	80012c0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80014fc:	480e      	ldr	r0, [pc, #56]	; (8001538 <MX_USART2_UART_Init+0x138>)
 80014fe:	f7ff fecf 	bl	80012a0 <LL_USART_Enable>
  //
  LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_7, (uint32_t)&TxData, LL_USART_DMA_GetRegAddr(USART2,LL_USART_DMA_REG_DATA_TRANSMIT), LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001502:	4c0e      	ldr	r4, [pc, #56]	; (800153c <MX_USART2_UART_Init+0x13c>)
 8001504:	2100      	movs	r1, #0
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_USART2_UART_Init+0x138>)
 8001508:	f7ff ff34 	bl	8001374 <LL_USART_DMA_GetRegAddr>
 800150c:	4603      	mov	r3, r0
 800150e:	2210      	movs	r2, #16
 8001510:	9200      	str	r2, [sp, #0]
 8001512:	4622      	mov	r2, r4
 8001514:	2107      	movs	r1, #7
 8001516:	4807      	ldr	r0, [pc, #28]	; (8001534 <MX_USART2_UART_Init+0x134>)
 8001518:	f7ff fe66 	bl	80011e8 <LL_DMA_ConfigAddresses>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 800151c:	2107      	movs	r1, #7
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART2_UART_Init+0x134>)
 8001520:	f7ff fe9e 	bl	8001260 <LL_DMA_EnableIT_TC>
  LL_USART_EnableIT_RXNE(USART2);
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <MX_USART2_UART_Init+0x138>)
 8001526:	f7ff fee1 	bl	80012ec <LL_USART_EnableIT_RXNE>
}
 800152a:	bf00      	nop
 800152c:	373c      	adds	r7, #60	; 0x3c
 800152e:	46bd      	mov	sp, r7
 8001530:	bd90      	pop	{r4, r7, pc}
 8001532:	bf00      	nop
 8001534:	40020000 	.word	0x40020000
 8001538:	40004400 	.word	0x40004400
 800153c:	2000002c 	.word	0x2000002c

08001540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001578 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <LoopForever+0x6>)
  ldr r1, =_edata
 8001546:	490e      	ldr	r1, [pc, #56]	; (8001580 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <LoopForever+0xe>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800154c:	e002      	b.n	8001554 <LoopCopyDataInit>

0800154e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001552:	3304      	adds	r3, #4

08001554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001558:	d3f9      	bcc.n	800154e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800155a:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <LoopForever+0x12>)
  ldr r4, =_ebss
 800155c:	4c0b      	ldr	r4, [pc, #44]	; (800158c <LoopForever+0x16>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001560:	e001      	b.n	8001566 <LoopFillZerobss>

08001562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001564:	3204      	adds	r2, #4

08001566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001568:	d3fb      	bcc.n	8001562 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800156a:	f7ff fca3 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f002 f9a3 	bl	80038b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001572:	f7ff fac9 	bl	8000b08 <main>

08001576 <LoopForever>:

LoopForever:
    b LoopForever
 8001576:	e7fe      	b.n	8001576 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001578:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001580:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001584:	08003978 	.word	0x08003978
  ldr r2, =_sbss
 8001588:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800158c:	2000004c 	.word	0x2000004c

08001590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001590:	e7fe      	b.n	8001590 <ADC1_2_IRQHandler>
	...

08001594 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_Init+0x28>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_Init+0x28>)
 800159e:	f043 0310 	orr.w	r3, r3, #16
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 f931 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f000 f808 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b0:	f7ff fc00 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40022000 	.word	0x40022000

080015c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x54>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x58>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f93b 	bl	800185a <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 f911 	bl	8001822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_InitTick+0x5c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	20000008 	.word	0x20000008
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	20000048 	.word	0x20000048

08001648 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;  
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000048 	.word	0x20000048

08001660 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008

080016a8 <__NVIC_SetPriorityGrouping>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_SetPriority>:
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db0a      	blt.n	8001736 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	490c      	ldr	r1, [pc, #48]	; (8001758 <__NVIC_SetPriority+0x4c>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	0112      	lsls	r2, r2, #4
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	440b      	add	r3, r1
 8001730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001734:	e00a      	b.n	800174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4908      	ldr	r1, [pc, #32]	; (800175c <__NVIC_SetPriority+0x50>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	3b04      	subs	r3, #4
 8001744:	0112      	lsls	r2, r2, #4
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	440b      	add	r3, r1
 800174a:	761a      	strb	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000e100 	.word	0xe000e100
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <NVIC_EncodePriority>:
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f1c3 0307 	rsb	r3, r3, #7
 800177a:	2b04      	cmp	r3, #4
 800177c:	bf28      	it	cs
 800177e:	2304      	movcs	r3, #4
 8001780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3304      	adds	r3, #4
 8001786:	2b06      	cmp	r3, #6
 8001788:	d902      	bls.n	8001790 <NVIC_EncodePriority+0x30>
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3b03      	subs	r3, #3
 800178e:	e000      	b.n	8001792 <NVIC_EncodePriority+0x32>
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	f04f 32ff 	mov.w	r2, #4294967295
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	401a      	ands	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	43d9      	mvns	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b8:	4313      	orrs	r3, r2
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f7ff ff8e 	bl	800170c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff47 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff5c 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff8e 	bl	8001760 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5d 	bl	800170c <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffb0 	bl	80017c8 <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800187a:	af00      	add	r7, sp, #0
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001884:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	f001 b823 	b.w	80028e0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 817d 	beq.w	8001baa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80018b0:	4bbc      	ldr	r3, [pc, #752]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d00c      	beq.n	80018d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018bc:	4bb9      	ldr	r3, [pc, #740]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d15c      	bne.n	8001982 <HAL_RCC_OscConfig+0x10e>
 80018c8:	4bb6      	ldr	r3, [pc, #728]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d155      	bne.n	8001982 <HAL_RCC_OscConfig+0x10e>
 80018d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018da:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80018ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	095b      	lsrs	r3, r3, #5
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <HAL_RCC_OscConfig+0x94>
 8001902:	4ba8      	ldr	r3, [pc, #672]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	e015      	b.n	8001934 <HAL_RCC_OscConfig+0xc0>
 8001908:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800191c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001920:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001924:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001930:	4b9c      	ldr	r3, [pc, #624]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001938:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800193c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001940:	fa92 f2a2 	rbit	r2, r2
 8001944:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001948:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800194c:	fab2 f282 	clz	r2, r2
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	f042 0220 	orr.w	r2, r2, #32
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	f002 021f 	and.w	r2, r2, #31
 800195c:	2101      	movs	r1, #1
 800195e:	fa01 f202 	lsl.w	r2, r1, r2
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 811f 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x334>
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 8116 	bne.w	8001ba8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	f000 bfaf 	b.w	80028e0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001986:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x12e>
 8001994:	4b83      	ldr	r3, [pc, #524]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a82      	ldr	r2, [pc, #520]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 800199a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e036      	b.n	8001a10 <HAL_RCC_OscConfig+0x19c>
 80019a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x158>
 80019b2:	4b7c      	ldr	r3, [pc, #496]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a7b      	ldr	r2, [pc, #492]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80019b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a78      	ldr	r2, [pc, #480]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80019c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e021      	b.n	8001a10 <HAL_RCC_OscConfig+0x19c>
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x184>
 80019de:	4b71      	ldr	r3, [pc, #452]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a70      	ldr	r2, [pc, #448]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6d      	ldr	r2, [pc, #436]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0x19c>
 80019f8:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a69      	ldr	r2, [pc, #420]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b67      	ldr	r3, [pc, #412]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a66      	ldr	r2, [pc, #408]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a10:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	f023 020f 	bic.w	r2, r3, #15
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	495f      	ldr	r1, [pc, #380]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d059      	beq.n	8001aee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fe05 	bl	8001648 <HAL_GetTick>
 8001a3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fe00 	bl	8001648 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b64      	cmp	r3, #100	; 0x64
 8001a52:	d902      	bls.n	8001a5a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	f000 bf43 	b.w	80028e0 <HAL_RCC_OscConfig+0x106c>
 8001a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a5e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a62:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001a6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	095b      	lsrs	r3, r3, #5
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d102      	bne.n	8001a8c <HAL_RCC_OscConfig+0x218>
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	e015      	b.n	8001ab8 <HAL_RCC_OscConfig+0x244>
 8001a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a90:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aa4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001aa8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001ab4:	4b3b      	ldr	r3, [pc, #236]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001abc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001ac0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001ac4:	fa92 f2a2 	rbit	r2, r2
 8001ac8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001acc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ad0:	fab2 f282 	clz	r2, r2
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	f042 0220 	orr.w	r2, r2, #32
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	f002 021f 	and.w	r2, r2, #31
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ab      	beq.n	8001a44 <HAL_RCC_OscConfig+0x1d0>
 8001aec:	e05d      	b.n	8001baa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7ff fdab 	bl	8001648 <HAL_GetTick>
 8001af2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff fda6 	bl	8001648 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d902      	bls.n	8001b0e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	f000 bee9 	b.w	80028e0 <HAL_RCC_OscConfig+0x106c>
 8001b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b12:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001b1a:	fa93 f3a3 	rbit	r3, r3
 8001b1e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001b22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b26:	fab3 f383 	clz	r3, r3
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	095b      	lsrs	r3, r3, #5
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d102      	bne.n	8001b40 <HAL_RCC_OscConfig+0x2cc>
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e015      	b.n	8001b6c <HAL_RCC_OscConfig+0x2f8>
 8001b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b44:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b58:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001b5c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001b60:	fa93 f3a3 	rbit	r3, r3
 8001b64:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b70:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001b74:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001b78:	fa92 f2a2 	rbit	r2, r2
 8001b7c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001b80:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f002 021f 	and.w	r2, r2, #31
 8001b94:	2101      	movs	r1, #1
 8001b96:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1ab      	bne.n	8001af8 <HAL_RCC_OscConfig+0x284>
 8001ba0:	e003      	b.n	8001baa <HAL_RCC_OscConfig+0x336>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 817d 	beq.w	8001eba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bc0:	4ba6      	ldr	r3, [pc, #664]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00b      	beq.n	8001be4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bcc:	4ba3      	ldr	r3, [pc, #652]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 030c 	and.w	r3, r3, #12
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	d172      	bne.n	8001cbe <HAL_RCC_OscConfig+0x44a>
 8001bd8:	4ba0      	ldr	r3, [pc, #640]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d16c      	bne.n	8001cbe <HAL_RCC_OscConfig+0x44a>
 8001be4:	2302      	movs	r3, #2
 8001be6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001bf6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	095b      	lsrs	r3, r3, #5
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d102      	bne.n	8001c14 <HAL_RCC_OscConfig+0x3a0>
 8001c0e:	4b93      	ldr	r3, [pc, #588]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	e013      	b.n	8001c3c <HAL_RCC_OscConfig+0x3c8>
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001c2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001c38:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001c42:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001c46:	fa92 f2a2 	rbit	r2, r2
 8001c4a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001c4e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001c52:	fab2 f282 	clz	r2, r2
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f042 0220 	orr.w	r2, r2, #32
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f002 021f 	and.w	r2, r2, #31
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f202 	lsl.w	r2, r1, r2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00a      	beq.n	8001c84 <HAL_RCC_OscConfig+0x410>
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d002      	beq.n	8001c84 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f000 be2e 	b.w	80028e0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	21f8      	movs	r1, #248	; 0xf8
 8001c9a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ca2:	fa91 f1a1 	rbit	r1, r1
 8001ca6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001caa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001cae:	fab1 f181 	clz	r1, r1
 8001cb2:	b2c9      	uxtb	r1, r1
 8001cb4:	408b      	lsls	r3, r1
 8001cb6:	4969      	ldr	r1, [pc, #420]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbc:	e0fd      	b.n	8001eba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 8088 	beq.w	8001de0 <HAL_RCC_OscConfig+0x56c>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ce2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fca4 	bl	8001648 <HAL_GetTick>
 8001d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff fc9f 	bl	8001648 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d902      	bls.n	8001d1c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	f000 bde2 	b.w	80028e0 <HAL_RCC_OscConfig+0x106c>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d102      	bne.n	8001d4c <HAL_RCC_OscConfig+0x4d8>
 8001d46:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e013      	b.n	8001d74 <HAL_RCC_OscConfig+0x500>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001d5e:	2302      	movs	r3, #2
 8001d60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001d64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001d68:	fa93 f3a3 	rbit	r3, r3
 8001d6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	2202      	movs	r2, #2
 8001d76:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001d7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001d7e:	fa92 f2a2 	rbit	r2, r2
 8001d82:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001d86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001d8a:	fab2 f282 	clz	r2, r2
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	f042 0220 	orr.w	r2, r2, #32
 8001d94:	b2d2      	uxtb	r2, r2
 8001d96:	f002 021f 	and.w	r2, r2, #31
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0af      	beq.n	8001d06 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001db2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	21f8      	movs	r1, #248	; 0xf8
 8001dbc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001dc4:	fa91 f1a1 	rbit	r1, r1
 8001dc8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001dcc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001dd0:	fab1 f181 	clz	r1, r1
 8001dd4:	b2c9      	uxtb	r1, r1
 8001dd6:	408b      	lsls	r3, r1
 8001dd8:	4920      	ldr	r1, [pc, #128]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	600b      	str	r3, [r1, #0]
 8001dde:	e06c      	b.n	8001eba <HAL_RCC_OscConfig+0x646>
 8001de0:	2301      	movs	r3, #1
 8001de2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001df2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	461a      	mov	r2, r3
 8001e08:	2300      	movs	r3, #0
 8001e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fc1c 	bl	8001648 <HAL_GetTick>
 8001e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fc17 	bl	8001648 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d902      	bls.n	8001e2c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	f000 bd5a 	b.w	80028e0 <HAL_RCC_OscConfig+0x106c>
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d104      	bne.n	8001e60 <HAL_RCC_OscConfig+0x5ec>
 8001e56:	4b01      	ldr	r3, [pc, #4]	; (8001e5c <HAL_RCC_OscConfig+0x5e8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	e015      	b.n	8001e88 <HAL_RCC_OscConfig+0x614>
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	2302      	movs	r3, #2
 8001e62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001e78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001e84:	4bc8      	ldr	r3, [pc, #800]	; (80021a8 <HAL_RCC_OscConfig+0x934>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001e8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e92:	fa92 f2a2 	rbit	r2, r2
 8001e96:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001e9a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e9e:	fab2 f282 	clz	r2, r2
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	f042 0220 	orr.w	r2, r2, #32
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	f002 021f 	and.w	r2, r2, #31
 8001eae:	2101      	movs	r1, #1
 8001eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ad      	bne.n	8001e16 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ebe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8110 	beq.w	80020f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d079      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x760>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	461a      	mov	r2, r3
 8001efe:	4bab      	ldr	r3, [pc, #684]	; (80021ac <HAL_RCC_OscConfig+0x938>)
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	461a      	mov	r2, r3
 8001f06:	2301      	movs	r3, #1
 8001f08:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fb9d 	bl	8001648 <HAL_GetTick>
 8001f0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f14:	f7ff fb98 	bl	8001648 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d902      	bls.n	8001f2a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	f000 bcdb 	b.w	80028e0 <HAL_RCC_OscConfig+0x106c>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f40:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f44:	2202      	movs	r2, #2
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fa93 f2a3 	rbit	r2, r3
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f68:	2202      	movs	r2, #2
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fa93 f2a3 	rbit	r2, r3
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001f82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f84:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_OscConfig+0x934>)
 8001f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f90:	2102      	movs	r1, #2
 8001f92:	6019      	str	r1, [r3, #0]
 8001f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f98:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	fa93 f1a3 	rbit	r1, r3
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001faa:	6019      	str	r1, [r3, #0]
  return result;
 8001fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0a0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x6a0>
 8001fd2:	e08d      	b.n	80020f0 <HAL_RCC_OscConfig+0x87c>
 8001fd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fd8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	fa93 f2a3 	rbit	r2, r3
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ff6:	601a      	str	r2, [r3, #0]
  return result;
 8001ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ffc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002000:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	4b68      	ldr	r3, [pc, #416]	; (80021ac <HAL_RCC_OscConfig+0x938>)
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	461a      	mov	r2, r3
 8002012:	2300      	movs	r3, #0
 8002014:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff fb17 	bl	8001648 <HAL_GetTick>
 800201a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201e:	e00a      	b.n	8002036 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff fb12 	bl	8001648 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d902      	bls.n	8002036 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	f000 bc55 	b.w	80028e0 <HAL_RCC_OscConfig+0x106c>
 8002036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800203a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800203e:	2202      	movs	r2, #2
 8002040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002046:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800205e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002062:	2202      	movs	r2, #2
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fa93 f2a3 	rbit	r2, r3
 8002074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002078:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002086:	2202      	movs	r2, #2
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	fa93 f2a3 	rbit	r2, r3
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80020a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a2:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_RCC_OscConfig+0x934>)
 80020a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020ae:	2102      	movs	r1, #2
 80020b0:	6019      	str	r1, [r3, #0]
 80020b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020b6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	fa93 f1a3 	rbit	r1, r3
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020c8:	6019      	str	r1, [r3, #0]
  return result;
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d197      	bne.n	8002020 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 81a1 	beq.w	8002448 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800210c:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_RCC_OscConfig+0x934>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d116      	bne.n	8002146 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_RCC_OscConfig+0x934>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <HAL_RCC_OscConfig+0x934>)
 800211e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002122:	61d3      	str	r3, [r2, #28]
 8002124:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_OscConfig+0x934>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800212c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002130:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800213e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002140:	2301      	movs	r3, #1
 8002142:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <HAL_RCC_OscConfig+0x93c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d11a      	bne.n	8002188 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_RCC_OscConfig+0x93c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_RCC_OscConfig+0x93c>)
 8002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215e:	f7ff fa73 	bl	8001648 <HAL_GetTick>
 8002162:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002166:	e009      	b.n	800217c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7ff fa6e 	bl	8001648 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b64      	cmp	r3, #100	; 0x64
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e3b1      	b.n	80028e0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <HAL_RCC_OscConfig+0x93c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0ef      	beq.n	8002168 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d10d      	bne.n	80021b4 <HAL_RCC_OscConfig+0x940>
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_RCC_OscConfig+0x934>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a02      	ldr	r2, [pc, #8]	; (80021a8 <HAL_RCC_OscConfig+0x934>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e03c      	b.n	8002220 <HAL_RCC_OscConfig+0x9ac>
 80021a6:	bf00      	nop
 80021a8:	40021000 	.word	0x40021000
 80021ac:	10908120 	.word	0x10908120
 80021b0:	40007000 	.word	0x40007000
 80021b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10c      	bne.n	80021de <HAL_RCC_OscConfig+0x96a>
 80021c4:	4bc1      	ldr	r3, [pc, #772]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4ac0      	ldr	r2, [pc, #768]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80021ca:	f023 0301 	bic.w	r3, r3, #1
 80021ce:	6213      	str	r3, [r2, #32]
 80021d0:	4bbe      	ldr	r3, [pc, #760]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4abd      	ldr	r2, [pc, #756]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	6213      	str	r3, [r2, #32]
 80021dc:	e020      	b.n	8002220 <HAL_RCC_OscConfig+0x9ac>
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d10c      	bne.n	8002208 <HAL_RCC_OscConfig+0x994>
 80021ee:	4bb7      	ldr	r3, [pc, #732]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4ab6      	ldr	r2, [pc, #728]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80021f4:	f043 0304 	orr.w	r3, r3, #4
 80021f8:	6213      	str	r3, [r2, #32]
 80021fa:	4bb4      	ldr	r3, [pc, #720]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4ab3      	ldr	r2, [pc, #716]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6213      	str	r3, [r2, #32]
 8002206:	e00b      	b.n	8002220 <HAL_RCC_OscConfig+0x9ac>
 8002208:	4bb0      	ldr	r3, [pc, #704]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4aaf      	ldr	r2, [pc, #700]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 800220e:	f023 0301 	bic.w	r3, r3, #1
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	4bad      	ldr	r3, [pc, #692]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4aac      	ldr	r2, [pc, #688]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 800221a:	f023 0304 	bic.w	r3, r3, #4
 800221e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 8081 	beq.w	8002334 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002232:	f7ff fa09 	bl	8001648 <HAL_GetTick>
 8002236:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7ff fa04 	bl	8001648 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	; 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e345      	b.n	80028e0 <HAL_RCC_OscConfig+0x106c>
 8002254:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002258:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800225c:	2202      	movs	r2, #2
 800225e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002272:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002280:	2202      	movs	r2, #2
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	fa93 f2a3 	rbit	r2, r3
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800229a:	601a      	str	r2, [r3, #0]
  return result;
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80022a4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_OscConfig+0xa4c>
 80022ba:	4b84      	ldr	r3, [pc, #528]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	e013      	b.n	80022e8 <HAL_RCC_OscConfig+0xa74>
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022c8:	2202      	movs	r2, #2
 80022ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fa93 f2a3 	rbit	r2, r3
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	4b79      	ldr	r3, [pc, #484]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022f0:	2102      	movs	r1, #2
 80022f2:	6011      	str	r1, [r2, #0]
 80022f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	fa92 f1a2 	rbit	r1, r2
 8002302:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002306:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800230a:	6011      	str	r1, [r2, #0]
  return result;
 800230c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002310:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002314:	6812      	ldr	r2, [r2, #0]
 8002316:	fab2 f282 	clz	r2, r2
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f002 021f 	and.w	r2, r2, #31
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f202 	lsl.w	r2, r1, r2
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d084      	beq.n	800223c <HAL_RCC_OscConfig+0x9c8>
 8002332:	e07f      	b.n	8002434 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7ff f988 	bl	8001648 <HAL_GetTick>
 8002338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233c:	e00b      	b.n	8002356 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7ff f983 	bl	8001648 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e2c4      	b.n	80028e0 <HAL_RCC_OscConfig+0x106c>
 8002356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800235e:	2202      	movs	r2, #2
 8002360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	fa93 f2a3 	rbit	r2, r3
 8002370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002374:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002382:	2202      	movs	r2, #2
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	fa93 f2a3 	rbit	r2, r3
 8002394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002398:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800239c:	601a      	str	r2, [r3, #0]
  return result;
 800239e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80023a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d102      	bne.n	80023c2 <HAL_RCC_OscConfig+0xb4e>
 80023bc:	4b43      	ldr	r3, [pc, #268]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	e013      	b.n	80023ea <HAL_RCC_OscConfig+0xb76>
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023ca:	2202      	movs	r2, #2
 80023cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	4b39      	ldr	r3, [pc, #228]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023f2:	2102      	movs	r1, #2
 80023f4:	6011      	str	r1, [r2, #0]
 80023f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80023fa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	fa92 f1a2 	rbit	r1, r2
 8002404:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002408:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800240c:	6011      	str	r1, [r2, #0]
  return result;
 800240e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002412:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	fab2 f282 	clz	r2, r2
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	f002 021f 	and.w	r2, r2, #31
 8002428:	2101      	movs	r1, #1
 800242a:	fa01 f202 	lsl.w	r2, r1, r2
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d184      	bne.n	800233e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002434:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	4a22      	ldr	r2, [pc, #136]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8242 	beq.w	80028de <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_RCC_OscConfig+0xc58>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b08      	cmp	r3, #8
 8002464:	f000 8213 	beq.w	800288e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800246c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b02      	cmp	r3, #2
 8002476:	f040 8162 	bne.w	800273e <HAL_RCC_OscConfig+0xeca>
 800247a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800247e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002482:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	fa93 f2a3 	rbit	r2, r3
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800249e:	601a      	str	r2, [r3, #0]
  return result;
 80024a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80024a8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	461a      	mov	r2, r3
 80024bc:	2300      	movs	r3, #0
 80024be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff f8c2 	bl	8001648 <HAL_GetTick>
 80024c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	e00c      	b.n	80024e4 <HAL_RCC_OscConfig+0xc70>
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024d0:	f7ff f8ba 	bl	8001648 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1fd      	b.n	80028e0 <HAL_RCC_OscConfig+0x106c>
 80024e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	fa93 f2a3 	rbit	r2, r3
 8002500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002504:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002508:	601a      	str	r2, [r3, #0]
  return result;
 800250a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002512:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d102      	bne.n	800252e <HAL_RCC_OscConfig+0xcba>
 8002528:	4bb0      	ldr	r3, [pc, #704]	; (80027ec <HAL_RCC_OscConfig+0xf78>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	e027      	b.n	800257e <HAL_RCC_OscConfig+0xd0a>
 800252e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002532:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002536:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800253a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002540:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f2a3 	rbit	r2, r3
 800254a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800255c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fa93 f2a3 	rbit	r2, r3
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	4b9c      	ldr	r3, [pc, #624]	; (80027ec <HAL_RCC_OscConfig+0xf78>)
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002582:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002586:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800258a:	6011      	str	r1, [r2, #0]
 800258c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002590:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	fa92 f1a2 	rbit	r1, r2
 800259a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800259e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025a2:	6011      	str	r1, [r2, #0]
  return result;
 80025a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025a8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	fab2 f282 	clz	r2, r2
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f042 0220 	orr.w	r2, r2, #32
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	f002 021f 	and.w	r2, r2, #31
 80025be:	2101      	movs	r1, #1
 80025c0:	fa01 f202 	lsl.w	r2, r1, r2
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d182      	bne.n	80024d0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ca:	4b88      	ldr	r3, [pc, #544]	; (80027ec <HAL_RCC_OscConfig+0xf78>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80025de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	430b      	orrs	r3, r1
 80025ec:	497f      	ldr	r1, [pc, #508]	; (80027ec <HAL_RCC_OscConfig+0xf78>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
 80025f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80025fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002604:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002616:	601a      	str	r2, [r3, #0]
  return result;
 8002618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800261c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002620:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800262c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	461a      	mov	r2, r3
 8002634:	2301      	movs	r3, #1
 8002636:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7ff f806 	bl	8001648 <HAL_GetTick>
 800263c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002640:	e009      	b.n	8002656 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002642:	f7ff f801 	bl	8001648 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e144      	b.n	80028e0 <HAL_RCC_OscConfig+0x106c>
 8002656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800265e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002668:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002676:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800267a:	601a      	str	r2, [r3, #0]
  return result;
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002684:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d102      	bne.n	80026a0 <HAL_RCC_OscConfig+0xe2c>
 800269a:	4b54      	ldr	r3, [pc, #336]	; (80027ec <HAL_RCC_OscConfig+0xf78>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	e027      	b.n	80026f0 <HAL_RCC_OscConfig+0xe7c>
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	fa93 f2a3 	rbit	r2, r3
 80026bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ca:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	fa93 f2a3 	rbit	r2, r3
 80026e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	4b3f      	ldr	r3, [pc, #252]	; (80027ec <HAL_RCC_OscConfig+0xf78>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026f4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80026f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026fc:	6011      	str	r1, [r2, #0]
 80026fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002702:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	fa92 f1a2 	rbit	r1, r2
 800270c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002710:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002714:	6011      	str	r1, [r2, #0]
  return result;
 8002716:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800271a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	fab2 f282 	clz	r2, r2
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f042 0220 	orr.w	r2, r2, #32
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f002 021f 	and.w	r2, r2, #31
 8002730:	2101      	movs	r1, #1
 8002732:	fa01 f202 	lsl.w	r2, r1, r2
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d082      	beq.n	8002642 <HAL_RCC_OscConfig+0xdce>
 800273c:	e0cf      	b.n	80028de <HAL_RCC_OscConfig+0x106a>
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002746:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002762:	601a      	str	r2, [r3, #0]
  return result;
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800276c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002778:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	461a      	mov	r2, r3
 8002780:	2300      	movs	r3, #0
 8002782:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe ff60 	bl	8001648 <HAL_GetTick>
 8002788:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278c:	e009      	b.n	80027a2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe ff5b 	bl	8001648 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e09e      	b.n	80028e0 <HAL_RCC_OscConfig+0x106c>
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027c6:	601a      	str	r2, [r3, #0]
  return result;
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80027d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	095b      	lsrs	r3, r3, #5
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d104      	bne.n	80027f0 <HAL_RCC_OscConfig+0xf7c>
 80027e6:	4b01      	ldr	r3, [pc, #4]	; (80027ec <HAL_RCC_OscConfig+0xf78>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	e029      	b.n	8002840 <HAL_RCC_OscConfig+0xfcc>
 80027ec:	40021000 	.word	0x40021000
 80027f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80027f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	fa93 f2a3 	rbit	r2, r3
 800280c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002810:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800281a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800281e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	4b2b      	ldr	r3, [pc, #172]	; (80028ec <HAL_RCC_OscConfig+0x1078>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002844:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002848:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800284c:	6011      	str	r1, [r2, #0]
 800284e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002852:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	fa92 f1a2 	rbit	r1, r2
 800285c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002860:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002864:	6011      	str	r1, [r2, #0]
  return result;
 8002866:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800286a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	fab2 f282 	clz	r2, r2
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	f042 0220 	orr.w	r2, r2, #32
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	f002 021f 	and.w	r2, r2, #31
 8002880:	2101      	movs	r1, #1
 8002882:	fa01 f202 	lsl.w	r2, r1, r2
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d180      	bne.n	800278e <HAL_RCC_OscConfig+0xf1a>
 800288c:	e027      	b.n	80028de <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e01e      	b.n	80028e0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_RCC_OscConfig+0x1078>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028ae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d10b      	bne.n	80028da <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000

080028f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b09e      	sub	sp, #120	; 0x78
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e162      	b.n	8002bce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b90      	ldr	r3, [pc, #576]	; (8002b4c <HAL_RCC_ClockConfig+0x25c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d910      	bls.n	8002938 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b8d      	ldr	r3, [pc, #564]	; (8002b4c <HAL_RCC_ClockConfig+0x25c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	498b      	ldr	r1, [pc, #556]	; (8002b4c <HAL_RCC_ClockConfig+0x25c>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b89      	ldr	r3, [pc, #548]	; (8002b4c <HAL_RCC_ClockConfig+0x25c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e14a      	b.n	8002bce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b82      	ldr	r3, [pc, #520]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	497f      	ldr	r1, [pc, #508]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80dc 	beq.w	8002b1c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d13c      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xf6>
 800296c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002970:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800297a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <HAL_RCC_ClockConfig+0xa6>
 8002990:	4b6f      	ldr	r3, [pc, #444]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	e00f      	b.n	80029b6 <HAL_RCC_ClockConfig+0xc6>
 8002996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	667b      	str	r3, [r7, #100]	; 0x64
 80029a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a8:	663b      	str	r3, [r7, #96]	; 0x60
 80029aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80029bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029be:	fa92 f2a2 	rbit	r2, r2
 80029c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029c6:	fab2 f282 	clz	r2, r2
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	f042 0220 	orr.w	r2, r2, #32
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f002 021f 	and.w	r2, r2, #31
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f202 	lsl.w	r2, r1, r2
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d17b      	bne.n	8002ada <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0f3      	b.n	8002bce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d13c      	bne.n	8002a68 <HAL_RCC_ClockConfig+0x178>
 80029ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	095b      	lsrs	r3, r3, #5
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d102      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x128>
 8002a12:	4b4f      	ldr	r3, [pc, #316]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	e00f      	b.n	8002a38 <HAL_RCC_ClockConfig+0x148>
 8002a18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a1c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	647b      	str	r3, [r7, #68]	; 0x44
 8002a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a34:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a3c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a40:	fa92 f2a2 	rbit	r2, r2
 8002a44:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a48:	fab2 f282 	clz	r2, r2
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f042 0220 	orr.w	r2, r2, #32
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	f002 021f 	and.w	r2, r2, #31
 8002a58:	2101      	movs	r1, #1
 8002a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d13a      	bne.n	8002ada <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0b2      	b.n	8002bce <HAL_RCC_ClockConfig+0x2de>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a76:	fab3 f383 	clz	r3, r3
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	095b      	lsrs	r3, r3, #5
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d102      	bne.n	8002a90 <HAL_RCC_ClockConfig+0x1a0>
 8002a8a:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	e00d      	b.n	8002aac <HAL_RCC_ClockConfig+0x1bc>
 8002a90:	2302      	movs	r3, #2
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	fa93 f3a3 	rbit	r3, r3
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	623b      	str	r3, [r7, #32]
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	61fb      	str	r3, [r7, #28]
 8002aa8:	4b29      	ldr	r3, [pc, #164]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	2202      	movs	r2, #2
 8002aae:	61ba      	str	r2, [r7, #24]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	fa92 f2a2 	rbit	r2, r2
 8002ab6:	617a      	str	r2, [r7, #20]
  return result;
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	fab2 f282 	clz	r2, r2
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	f042 0220 	orr.w	r2, r2, #32
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	f002 021f 	and.w	r2, r2, #31
 8002aca:	2101      	movs	r1, #1
 8002acc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e079      	b.n	8002bce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ada:	4b1d      	ldr	r3, [pc, #116]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f023 0203 	bic.w	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	491a      	ldr	r1, [pc, #104]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aec:	f7fe fdac 	bl	8001648 <HAL_GetTick>
 8002af0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af4:	f7fe fda8 	bl	8001648 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e061      	b.n	8002bce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <HAL_RCC_ClockConfig+0x260>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 020c 	and.w	r2, r3, #12
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d1eb      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCC_ClockConfig+0x25c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d214      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_RCC_ClockConfig+0x25c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 0207 	bic.w	r2, r3, #7
 8002b32:	4906      	ldr	r1, [pc, #24]	; (8002b4c <HAL_RCC_ClockConfig+0x25c>)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_RCC_ClockConfig+0x25c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e040      	b.n	8002bce <HAL_RCC_ClockConfig+0x2de>
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	491a      	ldr	r1, [pc, #104]	; (8002bd8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4912      	ldr	r1, [pc, #72]	; (8002bd8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b92:	f000 f829 	bl	8002be8 <HAL_RCC_GetSysClockFreq>
 8002b96:	4601      	mov	r1, r0
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_RCC_ClockConfig+0x2e8>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba0:	22f0      	movs	r2, #240	; 0xf0
 8002ba2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	fa92 f2a2 	rbit	r2, r2
 8002baa:	60fa      	str	r2, [r7, #12]
  return result;
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	fab2 f282 	clz	r2, r2
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	40d3      	lsrs	r3, r2
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_RCC_ClockConfig+0x2ec>)
 8002bb8:	5cd3      	ldrb	r3, [r2, r3]
 8002bba:	fa21 f303 	lsr.w	r3, r1, r3
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <HAL_RCC_ClockConfig+0x2f0>)
 8002bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_RCC_ClockConfig+0x2f4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fcfa 	bl	80015c0 <HAL_InitTick>
  
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3778      	adds	r7, #120	; 0x78
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08003930 	.word	0x08003930
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000004 	.word	0x20000004

08002be8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b08b      	sub	sp, #44	; 0x2c
 8002bec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c02:	4b29      	ldr	r3, [pc, #164]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d002      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x30>
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d003      	beq.n	8002c1e <HAL_RCC_GetSysClockFreq+0x36>
 8002c16:	e03c      	b.n	8002c92 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c18:	4b24      	ldr	r3, [pc, #144]	; (8002cac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c1a:	623b      	str	r3, [r7, #32]
      break;
 8002c1c:	e03c      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c24:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c28:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	fa92 f2a2 	rbit	r2, r2
 8002c30:	607a      	str	r2, [r7, #4]
  return result;
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	fab2 f282 	clz	r2, r2
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	40d3      	lsrs	r3, r2
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c42:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	220f      	movs	r2, #15
 8002c4c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	fa92 f2a2 	rbit	r2, r2
 8002c54:	60fa      	str	r2, [r7, #12]
  return result;
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	fab2 f282 	clz	r2, r2
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	40d3      	lsrs	r3, r2
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c62:	5cd3      	ldrb	r3, [r2, r3]
 8002c64:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c70:	4a0e      	ldr	r2, [pc, #56]	; (8002cac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c80:	e004      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	623b      	str	r3, [r7, #32]
      break;
 8002c90:	e002      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c94:	623b      	str	r3, [r7, #32]
      break;
 8002c96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c98:	6a3b      	ldr	r3, [r7, #32]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	372c      	adds	r7, #44	; 0x2c
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	007a1200 	.word	0x007a1200
 8002cb0:	08003950 	.word	0x08003950
 8002cb4:	08003960 	.word	0x08003960
 8002cb8:	003d0900 	.word	0x003d0900

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b092      	sub	sp, #72	; 0x48
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80cd 	beq.w	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce0:	4b86      	ldr	r3, [pc, #536]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10e      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	4b83      	ldr	r3, [pc, #524]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	4a82      	ldr	r2, [pc, #520]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	61d3      	str	r3, [r2, #28]
 8002cf8:	4b80      	ldr	r3, [pc, #512]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d04:	2301      	movs	r3, #1
 8002d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0a:	4b7d      	ldr	r3, [pc, #500]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d118      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d16:	4b7a      	ldr	r3, [pc, #488]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a79      	ldr	r2, [pc, #484]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fc91 	bl	8001648 <HAL_GetTick>
 8002d26:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	e008      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2a:	f7fe fc8d 	bl	8001648 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	; 0x64
 8002d36:	d901      	bls.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0db      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d48:	4b6c      	ldr	r3, [pc, #432]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d50:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d07d      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d076      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d66:	4b65      	ldr	r3, [pc, #404]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	fa93 f3a3 	rbit	r3, r3
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b5e      	ldr	r3, [pc, #376]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2301      	movs	r3, #1
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b55      	ldr	r3, [pc, #340]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	461a      	mov	r2, r3
 8002db4:	2300      	movs	r3, #0
 8002db6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002db8:	4a50      	ldr	r2, [pc, #320]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dbc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d045      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fc3e 	bl	8001648 <HAL_GetTick>
 8002dcc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fc3a 	bl	8001648 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e086      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002de6:	2302      	movs	r3, #2
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
 8002df2:	2302      	movs	r3, #2
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	61fb      	str	r3, [r7, #28]
  return result;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f043 0302 	orr.w	r3, r3, #2
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d102      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	e007      	b.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	4b35      	ldr	r3, [pc, #212]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	613a      	str	r2, [r7, #16]
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	fa92 f2a2 	rbit	r2, r2
 8002e34:	60fa      	str	r2, [r7, #12]
  return result;
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	fab2 f282 	clz	r2, r2
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f002 021f 	and.w	r2, r2, #31
 8002e48:	2101      	movs	r1, #1
 8002e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0bd      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e54:	4b29      	ldr	r3, [pc, #164]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4926      	ldr	r1, [pc, #152]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d105      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e6e:	4b23      	ldr	r3, [pc, #140]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	4a22      	ldr	r2, [pc, #136]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e78:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e86:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f023 0203 	bic.w	r2, r3, #3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	491a      	ldr	r1, [pc, #104]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	f023 0210 	bic.w	r2, r3, #16
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4912      	ldr	r1, [pc, #72]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	490b      	ldr	r1, [pc, #44]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ee0:	4b06      	ldr	r3, [pc, #24]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3748      	adds	r7, #72	; 0x48
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	40007000 	.word	0x40007000
 8002f04:	10908100 	.word	0x10908100

08002f08 <LL_GPIO_SetPinMode>:
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	613b      	str	r3, [r7, #16]
  return result;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2103      	movs	r1, #3
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	61bb      	str	r3, [r7, #24]
  return result;
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	601a      	str	r2, [r3, #0]
}
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_GPIO_SetPinOutputType>:
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	605a      	str	r2, [r3, #4]
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_GPIO_SetPinSpeed>:
{
 8002f96:	b480      	push	{r7}
 8002f98:	b089      	sub	sp, #36	; 0x24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	613b      	str	r3, [r7, #16]
  return result;
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	fab3 f383 	clz	r3, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2103      	movs	r1, #3
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	61bb      	str	r3, [r7, #24]
  return result;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	fab3 f383 	clz	r3, r3
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	bf00      	nop
 8002fea:	3724      	adds	r7, #36	; 0x24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_GPIO_SetPinPull>:
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	613b      	str	r3, [r7, #16]
  return result;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2103      	movs	r1, #3
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	401a      	ands	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	61bb      	str	r3, [r7, #24]
  return result;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	fa01 f303 	lsl.w	r3, r1, r3
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	60da      	str	r2, [r3, #12]
}
 8003046:	bf00      	nop
 8003048:	3724      	adds	r7, #36	; 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_GPIO_SetAFPin_0_7>:
{
 8003052:	b480      	push	{r7}
 8003054:	b089      	sub	sp, #36	; 0x24
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	613b      	str	r3, [r7, #16]
  return result;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	fab3 f383 	clz	r3, r3
 8003074:	b2db      	uxtb	r3, r3
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	210f      	movs	r1, #15
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	401a      	ands	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	61bb      	str	r3, [r7, #24]
  return result;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	431a      	orrs	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	621a      	str	r2, [r3, #32]
}
 80030a4:	bf00      	nop
 80030a6:	3724      	adds	r7, #36	; 0x24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_GPIO_SetAFPin_8_15>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	613b      	str	r3, [r7, #16]
  return result;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	210f      	movs	r1, #15
 80030da:	fa01 f303 	lsl.w	r3, r1, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	401a      	ands	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	61bb      	str	r3, [r7, #24]
  return result;
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	431a      	orrs	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003106:	bf00      	nop
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b088      	sub	sp, #32
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	613b      	str	r3, [r7, #16]
  return result;
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003134:	e051      	b.n	80031da <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	2101      	movs	r1, #1
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d043      	beq.n	80031d4 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d003      	beq.n	800315c <LL_GPIO_Init+0x4a>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d10e      	bne.n	800317a <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	461a      	mov	r2, r3
 8003162:	69b9      	ldr	r1, [r7, #24]
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff16 	bl	8002f96 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6819      	ldr	r1, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	461a      	mov	r2, r3
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fef6 	bl	8002f66 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	461a      	mov	r2, r3
 8003180:	69b9      	ldr	r1, [r7, #24]
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff ff36 	bl	8002ff4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d11a      	bne.n	80031c6 <LL_GPIO_Init+0xb4>
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	60bb      	str	r3, [r7, #8]
  return result;
 800319c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b07      	cmp	r3, #7
 80031a6:	d807      	bhi.n	80031b8 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	461a      	mov	r2, r3
 80031ae:	69b9      	ldr	r1, [r7, #24]
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7ff ff4e 	bl	8003052 <LL_GPIO_SetAFPin_0_7>
 80031b6:	e006      	b.n	80031c6 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	461a      	mov	r2, r3
 80031be:	69b9      	ldr	r1, [r7, #24]
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff ff75 	bl	80030b0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	461a      	mov	r2, r3
 80031cc:	69b9      	ldr	r1, [r7, #24]
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff fe9a 	bl	8002f08 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	3301      	adds	r3, #1
 80031d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1a6      	bne.n	8003136 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <LL_I2C_Enable>:
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	601a      	str	r2, [r3, #0]
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <LL_I2C_Disable>:
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 0201 	bic.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	601a      	str	r2, [r3, #0]
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_I2C_ConfigFilters>:
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0219      	lsls	r1, r3, #8
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	430b      	orrs	r3, r1
 800324e:	431a      	orrs	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_I2C_SetOwnAddress1>:
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003274:	f023 0307 	bic.w	r3, r3, #7
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	430a      	orrs	r2, r1
 800327e:	431a      	orrs	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_I2C_EnableOwnAddress1>:
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_I2C_DisableOwnAddress1>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	609a      	str	r2, [r3, #8]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <LL_I2C_SetTiming>:
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	611a      	str	r2, [r3, #16]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_I2C_SetMode>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	601a      	str	r2, [r3, #0]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <LL_I2C_AcknowledgeNextData>:
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	605a      	str	r2, [r3, #4]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff65 	bl	8003212 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6899      	ldr	r1, [r3, #8]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	461a      	mov	r2, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff ff6d 	bl	8003232 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4619      	mov	r1, r3
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffb6 	bl	80032d0 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff44 	bl	80031f2 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff ffa0 	bl	80032b0 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	6919      	ldr	r1, [r3, #16]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	461a      	mov	r2, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ff70 	bl	8003260 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ff81 	bl	8003290 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ffa9 	bl	80032ec <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff ffb6 	bl	8003312 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <LL_RCC_HSI_IsReady+0x20>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b02      	cmp	r3, #2
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	40021000 	.word	0x40021000

080033d4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <LL_RCC_LSE_IsReady+0x20>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	bf0c      	ite	eq
 80033e4:	2301      	moveq	r3, #1
 80033e6:	2300      	movne	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40021000 	.word	0x40021000

080033f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <LL_RCC_GetSysClkSource+0x18>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000

08003414 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <LL_RCC_GetAHBPrescaler+0x18>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40021000 	.word	0x40021000

08003430 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000

0800344c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000

08003468 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003470:	4b07      	ldr	r3, [pc, #28]	; (8003490 <LL_RCC_GetUSARTClockSource+0x28>)
 8003472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003474:	2103      	movs	r1, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	fa01 f303 	lsl.w	r3, r1, r3
 800347c:	401a      	ands	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	061b      	lsls	r3, r3, #24
 8003482:	4313      	orrs	r3, r2
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	40021000 	.word	0x40021000

08003494 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <LL_RCC_PLL_GetMainSource+0x18>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000

080034b0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80034b4:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000

080034cc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80034d0:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <LL_RCC_PLL_GetPrediv+0x18>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f003 030f 	and.w	r3, r3, #15
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000

080034e8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80034f0:	f000 f864 	bl	80035bc <RCC_GetSystemClockFreq>
 80034f4:	4602      	mov	r2, r0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f882 	bl	8003608 <RCC_GetHCLKClockFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f890 	bl	8003634 <RCC_GetPCLK1ClockFreq>
 8003514:	4602      	mov	r2, r0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f89c 	bl	800365c <RCC_GetPCLK2ClockFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60da      	str	r2, [r3, #12]
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d12d      	bne.n	80035a2 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ff8e 	bl	8003468 <LL_RCC_GetUSARTClockSource>
 800354c:	4603      	mov	r3, r0
 800354e:	2b03      	cmp	r3, #3
 8003550:	d00a      	beq.n	8003568 <LL_RCC_GetUSARTClockFreq+0x34>
 8003552:	2b03      	cmp	r3, #3
 8003554:	d819      	bhi.n	800358a <LL_RCC_GetUSARTClockFreq+0x56>
 8003556:	2b01      	cmp	r3, #1
 8003558:	d002      	beq.n	8003560 <LL_RCC_GetUSARTClockFreq+0x2c>
 800355a:	2b02      	cmp	r3, #2
 800355c:	d00c      	beq.n	8003578 <LL_RCC_GetUSARTClockFreq+0x44>
 800355e:	e014      	b.n	800358a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003560:	f000 f82c 	bl	80035bc <RCC_GetSystemClockFreq>
 8003564:	60f8      	str	r0, [r7, #12]
        break;
 8003566:	e021      	b.n	80035ac <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8003568:	f7ff ff22 	bl	80033b0 <LL_RCC_HSI_IsReady>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d019      	beq.n	80035a6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8003572:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <LL_RCC_GetUSARTClockFreq+0x84>)
 8003574:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003576:	e016      	b.n	80035a6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8003578:	f7ff ff2c 	bl	80033d4 <LL_RCC_LSE_IsReady>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d013      	beq.n	80035aa <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8003582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003586:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003588:	e00f      	b.n	80035aa <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800358a:	f000 f817 	bl	80035bc <RCC_GetSystemClockFreq>
 800358e:	4603      	mov	r3, r0
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f839 	bl	8003608 <RCC_GetHCLKClockFreq>
 8003596:	4603      	mov	r3, r0
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f84b 	bl	8003634 <RCC_GetPCLK1ClockFreq>
 800359e:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80035a0:	e004      	b.n	80035ac <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80035a2:	bf00      	nop
 80035a4:	e002      	b.n	80035ac <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80035aa:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	007a1200 	.word	0x007a1200

080035bc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80035c6:	f7ff ff17 	bl	80033f8 <LL_RCC_GetSysClkSource>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d00c      	beq.n	80035ea <RCC_GetSystemClockFreq+0x2e>
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d80e      	bhi.n	80035f2 <RCC_GetSystemClockFreq+0x36>
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <RCC_GetSystemClockFreq+0x22>
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d003      	beq.n	80035e4 <RCC_GetSystemClockFreq+0x28>
 80035dc:	e009      	b.n	80035f2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <RCC_GetSystemClockFreq+0x48>)
 80035e0:	607b      	str	r3, [r7, #4]
      break;
 80035e2:	e009      	b.n	80035f8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80035e4:	4b07      	ldr	r3, [pc, #28]	; (8003604 <RCC_GetSystemClockFreq+0x48>)
 80035e6:	607b      	str	r3, [r7, #4]
      break;
 80035e8:	e006      	b.n	80035f8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80035ea:	f000 f84b 	bl	8003684 <RCC_PLL_GetFreqDomain_SYS>
 80035ee:	6078      	str	r0, [r7, #4]
      break;
 80035f0:	e002      	b.n	80035f8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80035f2:	4b04      	ldr	r3, [pc, #16]	; (8003604 <RCC_GetSystemClockFreq+0x48>)
 80035f4:	607b      	str	r3, [r7, #4]
      break;
 80035f6:	bf00      	nop
  }

  return frequency;
 80035f8:	687b      	ldr	r3, [r7, #4]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	007a1200 	.word	0x007a1200

08003608 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003610:	f7ff ff00 	bl	8003414 <LL_RCC_GetAHBPrescaler>
 8003614:	4603      	mov	r3, r0
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	4a04      	ldr	r2, [pc, #16]	; (8003630 <RCC_GetHCLKClockFreq+0x28>)
 800361e:	5cd3      	ldrb	r3, [r2, r3]
 8003620:	461a      	mov	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	40d3      	lsrs	r3, r2
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	08003930 	.word	0x08003930

08003634 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800363c:	f7ff fef8 	bl	8003430 <LL_RCC_GetAPB1Prescaler>
 8003640:	4603      	mov	r3, r0
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <RCC_GetPCLK1ClockFreq+0x24>)
 8003646:	5cd3      	ldrb	r3, [r2, r3]
 8003648:	461a      	mov	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	40d3      	lsrs	r3, r2
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	08003940 	.word	0x08003940

0800365c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003664:	f7ff fef2 	bl	800344c <LL_RCC_GetAPB2Prescaler>
 8003668:	4603      	mov	r3, r0
 800366a:	0adb      	lsrs	r3, r3, #11
 800366c:	4a04      	ldr	r2, [pc, #16]	; (8003680 <RCC_GetPCLK2ClockFreq+0x24>)
 800366e:	5cd3      	ldrb	r3, [r2, r3]
 8003670:	461a      	mov	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	40d3      	lsrs	r3, r2
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	08003940 	.word	0x08003940

08003684 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003684:	b590      	push	{r4, r7, lr}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003692:	f7ff feff 	bl	8003494 <LL_RCC_PLL_GetMainSource>
 8003696:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d004      	beq.n	80036a8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a4:	d003      	beq.n	80036ae <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80036a6:	e005      	b.n	80036b4 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80036a8:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80036aa:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80036ac:	e005      	b.n	80036ba <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80036b0:	60fb      	str	r3, [r7, #12]
      break;
 80036b2:	e002      	b.n	80036ba <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80036b4:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80036b6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80036b8:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80036ba:	f7ff ff07 	bl	80034cc <LL_RCC_PLL_GetPrediv>
 80036be:	4603      	mov	r3, r0
 80036c0:	3301      	adds	r3, #1
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	fbb2 f4f3 	udiv	r4, r2, r3
 80036c8:	f7ff fef2 	bl	80034b0 <LL_RCC_PLL_GetMultiplicator>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80036d2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80036d6:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	fa92 f2a2 	rbit	r2, r2
 80036de:	603a      	str	r2, [r7, #0]
  return result;
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	fab2 f282 	clz	r2, r2
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	40d3      	lsrs	r3, r2
 80036ea:	3302      	adds	r3, #2
 80036ec:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd90      	pop	{r4, r7, pc}
 80036f8:	003d0900 	.word	0x003d0900
 80036fc:	007a1200 	.word	0x007a1200

08003700 <LL_USART_IsEnabled>:
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <LL_USART_IsEnabled+0x18>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <LL_USART_IsEnabled+0x1a>
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <LL_USART_SetStopBitsLength>:
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	605a      	str	r2, [r3, #4]
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_USART_SetHWFlowCtrl>:
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	609a      	str	r2, [r3, #8]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <LL_USART_SetBaudRate>:
{
 8003772:	b480      	push	{r7}
 8003774:	b087      	sub	sp, #28
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003786:	d11a      	bne.n	80037be <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	005a      	lsls	r2, r3, #1
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	441a      	add	r2, r3
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	b29b      	uxth	r3, r3
 800379a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80037a2:	4013      	ands	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	60da      	str	r2, [r3, #12]
}
 80037bc:	e00a      	b.n	80037d4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	085a      	lsrs	r2, r3, #1
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	441a      	add	r2, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	60da      	str	r2, [r3, #12]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ff84 	bl	8003700 <LL_USART_IsEnabled>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d14e      	bne.n	800389c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <LL_USART_Init+0xc8>)
 8003804:	4013      	ands	r3, r2
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	6851      	ldr	r1, [r2, #4]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	68d2      	ldr	r2, [r2, #12]
 800380e:	4311      	orrs	r1, r2
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	6912      	ldr	r2, [r2, #16]
 8003814:	4311      	orrs	r1, r2
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	6992      	ldr	r2, [r2, #24]
 800381a:	430a      	orrs	r2, r1
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ff7c 	bl	8003726 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff89 	bl	800374c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <LL_USART_Init+0xcc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d104      	bne.n	800384c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003842:	2000      	movs	r0, #0
 8003844:	f7ff fe76 	bl	8003534 <LL_RCC_GetUSARTClockFreq>
 8003848:	61b8      	str	r0, [r7, #24]
 800384a:	e016      	b.n	800387a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <LL_USART_Init+0xd0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d107      	bne.n	8003864 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003854:	f107 0308 	add.w	r3, r7, #8
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fe45 	bl	80034e8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e00a      	b.n	800387a <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a13      	ldr	r2, [pc, #76]	; (80038b4 <LL_USART_Init+0xd4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d106      	bne.n	800387a <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800386c:	f107 0308 	add.w	r3, r7, #8
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fe39 	bl	80034e8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00d      	beq.n	800389c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003888:	2300      	movs	r3, #0
 800388a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ff6b 	bl	8003772 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800389c:	7ffb      	ldrb	r3, [r7, #31]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	efff69f3 	.word	0xefff69f3
 80038ac:	40013800 	.word	0x40013800
 80038b0:	40004400 	.word	0x40004400
 80038b4:	40004800 	.word	0x40004800

080038b8 <__libc_init_array>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	4d0d      	ldr	r5, [pc, #52]	; (80038f0 <__libc_init_array+0x38>)
 80038bc:	4c0d      	ldr	r4, [pc, #52]	; (80038f4 <__libc_init_array+0x3c>)
 80038be:	1b64      	subs	r4, r4, r5
 80038c0:	10a4      	asrs	r4, r4, #2
 80038c2:	2600      	movs	r6, #0
 80038c4:	42a6      	cmp	r6, r4
 80038c6:	d109      	bne.n	80038dc <__libc_init_array+0x24>
 80038c8:	4d0b      	ldr	r5, [pc, #44]	; (80038f8 <__libc_init_array+0x40>)
 80038ca:	4c0c      	ldr	r4, [pc, #48]	; (80038fc <__libc_init_array+0x44>)
 80038cc:	f000 f820 	bl	8003910 <_init>
 80038d0:	1b64      	subs	r4, r4, r5
 80038d2:	10a4      	asrs	r4, r4, #2
 80038d4:	2600      	movs	r6, #0
 80038d6:	42a6      	cmp	r6, r4
 80038d8:	d105      	bne.n	80038e6 <__libc_init_array+0x2e>
 80038da:	bd70      	pop	{r4, r5, r6, pc}
 80038dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038e0:	4798      	blx	r3
 80038e2:	3601      	adds	r6, #1
 80038e4:	e7ee      	b.n	80038c4 <__libc_init_array+0xc>
 80038e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ea:	4798      	blx	r3
 80038ec:	3601      	adds	r6, #1
 80038ee:	e7f2      	b.n	80038d6 <__libc_init_array+0x1e>
 80038f0:	08003970 	.word	0x08003970
 80038f4:	08003970 	.word	0x08003970
 80038f8:	08003970 	.word	0x08003970
 80038fc:	08003974 	.word	0x08003974

08003900 <memset>:
 8003900:	4402      	add	r2, r0
 8003902:	4603      	mov	r3, r0
 8003904:	4293      	cmp	r3, r2
 8003906:	d100      	bne.n	800390a <memset+0xa>
 8003908:	4770      	bx	lr
 800390a:	f803 1b01 	strb.w	r1, [r3], #1
 800390e:	e7f9      	b.n	8003904 <memset+0x4>

08003910 <_init>:
 8003910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003912:	bf00      	nop
 8003914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003916:	bc08      	pop	{r3}
 8003918:	469e      	mov	lr, r3
 800391a:	4770      	bx	lr

0800391c <_fini>:
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	bf00      	nop
 8003920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003922:	bc08      	pop	{r3}
 8003924:	469e      	mov	lr, r3
 8003926:	4770      	bx	lr
